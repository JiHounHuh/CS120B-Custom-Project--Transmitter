
Transmitter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b8  00800100  000013b4  00001448  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002d  008001b8  008001b8  00001500  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001500  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001530  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00001570  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000153c  00000000  00000000  00001630  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b0a  00000000  00000000  00002b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000af0  00000000  00000000  00003676  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000023c  00000000  00000000  00004168  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000759  00000000  00000000  000043a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c6d  00000000  00000000  00004afd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  0000576a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e3 c0       	rjmp	.+454    	; 0x1c8 <__ctors_end>
       2:	00 00       	nop
       4:	ff c0       	rjmp	.+510    	; 0x204 <__bad_interrupt>
       6:	00 00       	nop
       8:	fd c0       	rjmp	.+506    	; 0x204 <__bad_interrupt>
       a:	00 00       	nop
       c:	fb c0       	rjmp	.+502    	; 0x204 <__bad_interrupt>
       e:	00 00       	nop
      10:	f9 c0       	rjmp	.+498    	; 0x204 <__bad_interrupt>
      12:	00 00       	nop
      14:	f7 c0       	rjmp	.+494    	; 0x204 <__bad_interrupt>
      16:	00 00       	nop
      18:	f5 c0       	rjmp	.+490    	; 0x204 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f3 c0       	rjmp	.+486    	; 0x204 <__bad_interrupt>
      1e:	00 00       	nop
      20:	f1 c0       	rjmp	.+482    	; 0x204 <__bad_interrupt>
      22:	00 00       	nop
      24:	ef c0       	rjmp	.+478    	; 0x204 <__bad_interrupt>
      26:	00 00       	nop
      28:	ed c0       	rjmp	.+474    	; 0x204 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	eb c0       	rjmp	.+470    	; 0x204 <__bad_interrupt>
      2e:	00 00       	nop
      30:	e9 c0       	rjmp	.+466    	; 0x204 <__bad_interrupt>
      32:	00 00       	nop
      34:	bb c1       	rjmp	.+886    	; 0x3ac <__vector_13>
      36:	00 00       	nop
      38:	e5 c0       	rjmp	.+458    	; 0x204 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e3 c0       	rjmp	.+454    	; 0x204 <__bad_interrupt>
      3e:	00 00       	nop
      40:	e1 c0       	rjmp	.+450    	; 0x204 <__bad_interrupt>
      42:	00 00       	nop
      44:	df c0       	rjmp	.+446    	; 0x204 <__bad_interrupt>
      46:	00 00       	nop
      48:	dd c0       	rjmp	.+442    	; 0x204 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	db c0       	rjmp	.+438    	; 0x204 <__bad_interrupt>
      4e:	00 00       	nop
      50:	d9 c0       	rjmp	.+434    	; 0x204 <__bad_interrupt>
      52:	00 00       	nop
      54:	d7 c0       	rjmp	.+430    	; 0x204 <__bad_interrupt>
      56:	00 00       	nop
      58:	d5 c0       	rjmp	.+426    	; 0x204 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d3 c0       	rjmp	.+422    	; 0x204 <__bad_interrupt>
      5e:	00 00       	nop
      60:	d1 c0       	rjmp	.+418    	; 0x204 <__bad_interrupt>
      62:	00 00       	nop
      64:	cf c0       	rjmp	.+414    	; 0x204 <__bad_interrupt>
      66:	00 00       	nop
      68:	cd c0       	rjmp	.+410    	; 0x204 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	cb c0       	rjmp	.+406    	; 0x204 <__bad_interrupt>
      6e:	00 00       	nop
      70:	c9 c0       	rjmp	.+402    	; 0x204 <__bad_interrupt>
      72:	00 00       	nop
      74:	c7 c0       	rjmp	.+398    	; 0x204 <__bad_interrupt>
      76:	00 00       	nop
      78:	c5 c0       	rjmp	.+394    	; 0x204 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c3 c0       	rjmp	.+390    	; 0x204 <__bad_interrupt>
      7e:	00 00       	nop
      80:	c1 c0       	rjmp	.+386    	; 0x204 <__bad_interrupt>
      82:	00 00       	nop
      84:	bf c0       	rjmp	.+382    	; 0x204 <__bad_interrupt>
      86:	00 00       	nop
      88:	bd c0       	rjmp	.+378    	; 0x204 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	93 02       	muls	r25, r19
      8e:	98 02       	muls	r25, r24
      90:	98 02       	muls	r25, r24
      92:	98 02       	muls	r25, r24
      94:	98 02       	muls	r25, r24
      96:	98 02       	muls	r25, r24
      98:	98 02       	muls	r25, r24
      9a:	98 02       	muls	r25, r24
      9c:	78 03       	fmul	r23, r16
      9e:	90 03       	fmuls	r17, r16
      a0:	a8 03       	fmulsu	r18, r16
      a2:	98 02       	muls	r25, r24
      a4:	a1 02       	muls	r26, r17
      a6:	cb 02       	muls	r28, r27
      a8:	ff 02       	muls	r31, r31
      aa:	2a 03       	fmul	r18, r18
      ac:	45 03       	mulsu	r20, r21
      ae:	ba 03       	fmulsu	r19, r18
      b0:	c4 03       	fmuls	r20, r20
      b2:	4b 03       	fmul	r20, r19
      b4:	60 03       	mulsu	r22, r16
      b6:	78 03       	fmul	r23, r16
      b8:	90 03       	fmuls	r17, r16
      ba:	a8 03       	fmulsu	r18, r16
      bc:	51 04       	cpc	r5, r1
      be:	e4 04       	cpc	r14, r4
      c0:	e4 04       	cpc	r14, r4
      c2:	e4 04       	cpc	r14, r4
      c4:	e4 04       	cpc	r14, r4
      c6:	e4 04       	cpc	r14, r4
      c8:	e4 04       	cpc	r14, r4
      ca:	e4 04       	cpc	r14, r4
      cc:	e4 04       	cpc	r14, r4
      ce:	e4 04       	cpc	r14, r4
      d0:	e4 04       	cpc	r14, r4
      d2:	e4 04       	cpc	r14, r4
      d4:	e4 04       	cpc	r14, r4
      d6:	e4 04       	cpc	r14, r4
      d8:	e4 04       	cpc	r14, r4
      da:	e4 04       	cpc	r14, r4
      dc:	e4 04       	cpc	r14, r4
      de:	e4 04       	cpc	r14, r4
      e0:	e4 04       	cpc	r14, r4
      e2:	e4 04       	cpc	r14, r4
      e4:	e4 04       	cpc	r14, r4
      e6:	e4 04       	cpc	r14, r4
      e8:	e4 04       	cpc	r14, r4
      ea:	e4 04       	cpc	r14, r4
      ec:	e4 04       	cpc	r14, r4
      ee:	e4 04       	cpc	r14, r4
      f0:	e4 04       	cpc	r14, r4
      f2:	e4 04       	cpc	r14, r4
      f4:	e4 04       	cpc	r14, r4
      f6:	e4 04       	cpc	r14, r4
      f8:	e4 04       	cpc	r14, r4
      fa:	e4 04       	cpc	r14, r4
      fc:	e4 04       	cpc	r14, r4
      fe:	e4 04       	cpc	r14, r4
     100:	e4 04       	cpc	r14, r4
     102:	dc 04       	cpc	r13, r12
     104:	e4 04       	cpc	r14, r4
     106:	e4 04       	cpc	r14, r4
     108:	e4 04       	cpc	r14, r4
     10a:	e4 04       	cpc	r14, r4
     10c:	e4 04       	cpc	r14, r4
     10e:	e4 04       	cpc	r14, r4
     110:	d4 04       	cpc	r13, r4
     112:	e4 04       	cpc	r14, r4
     114:	e4 04       	cpc	r14, r4
     116:	e4 04       	cpc	r14, r4
     118:	e4 04       	cpc	r14, r4
     11a:	e4 04       	cpc	r14, r4
     11c:	56 04       	cpc	r5, r6
     11e:	5f 04       	cpc	r5, r15
     120:	68 04       	cpc	r6, r8
     122:	71 04       	cpc	r7, r1
     124:	7a 04       	cpc	r7, r10
     126:	83 04       	cpc	r8, r3
     128:	8c 04       	cpc	r8, r12
     12a:	95 04       	cpc	r9, r5
     12c:	9e 04       	cpc	r9, r14
     12e:	a7 04       	cpc	r10, r7
     130:	e4 04       	cpc	r14, r4
     132:	e4 04       	cpc	r14, r4
     134:	e4 04       	cpc	r14, r4
     136:	e4 04       	cpc	r14, r4
     138:	e4 04       	cpc	r14, r4
     13a:	e4 04       	cpc	r14, r4
     13c:	e4 04       	cpc	r14, r4
     13e:	b0 04       	cpc	r11, r0
     140:	b9 04       	cpc	r11, r9
     142:	c2 04       	cpc	r12, r2
     144:	cb 04       	cpc	r12, r11
     146:	07 63       	ori	r16, 0x37	; 55
     148:	42 36       	cpi	r20, 0x62	; 98
     14a:	b7 9b       	sbis	0x16, 7	; 22
     14c:	d8 a7       	std	Y+40, r29	; 0x28
     14e:	1a 39       	cpi	r17, 0x9A	; 154
     150:	68 56       	subi	r22, 0x68	; 104
     152:	18 ae       	std	Y+56, r1	; 0x38
     154:	ba ab       	std	Y+50, r27	; 0x32
     156:	55 8c       	ldd	r5, Z+29	; 0x1d
     158:	1d 3c       	cpi	r17, 0xCD	; 205
     15a:	b7 cc       	rjmp	.-1682   	; 0xfffffaca <__eeprom_end+0xff7efaca>
     15c:	57 63       	ori	r21, 0x37	; 55
     15e:	bd 6d       	ori	r27, 0xDD	; 221
     160:	ed fd       	.word	0xfded	; ????
     162:	75 3e       	cpi	r23, 0xE5	; 229
     164:	f6 17       	cp	r31, r22
     166:	72 31       	cpi	r23, 0x12	; 18
     168:	bf 00       	.word	0x00bf	; ????
     16a:	00 00       	nop
     16c:	80 3f       	cpi	r24, 0xF0	; 240
     16e:	08 00       	.word	0x0008	; ????
     170:	00 00       	nop
     172:	be 92       	st	-X, r11
     174:	24 49       	sbci	r18, 0x94	; 148
     176:	12 3e       	cpi	r17, 0xE2	; 226
     178:	ab aa       	std	Y+51, r10	; 0x33
     17a:	aa 2a       	or	r10, r26
     17c:	be cd       	rjmp	.-1156   	; 0xfffffcfa <__eeprom_end+0xff7efcfa>
     17e:	cc cc       	rjmp	.-1640   	; 0xfffffb18 <__eeprom_end+0xff7efb18>
     180:	4c 3e       	cpi	r20, 0xEC	; 236
     182:	00 00       	nop
     184:	00 80       	ld	r0, Z
     186:	be ab       	std	Y+54, r27	; 0x36
     188:	aa aa       	std	Y+50, r10	; 0x32
     18a:	aa 3e       	cpi	r26, 0xEA	; 234
     18c:	00 00       	nop
     18e:	00 00       	nop
     190:	bf 00       	.word	0x00bf	; ????
     192:	00 00       	nop
     194:	80 3f       	cpi	r24, 0xF0	; 240
     196:	00 00       	nop
     198:	00 00       	nop
     19a:	00 08       	sbc	r0, r0
     19c:	41 78       	andi	r20, 0x81	; 129
     19e:	d3 bb       	out	0x13, r29	; 19
     1a0:	43 87       	std	Z+11, r20	; 0x0b
     1a2:	d1 13       	cpse	r29, r17
     1a4:	3d 19       	sub	r19, r13
     1a6:	0e 3c       	cpi	r16, 0xCE	; 206
     1a8:	c3 bd       	out	0x23, r28	; 35
     1aa:	42 82       	std	Z+2, r4	; 0x02
     1ac:	ad 2b       	or	r26, r29
     1ae:	3e 68       	ori	r19, 0x8E	; 142
     1b0:	ec 82       	std	Y+4, r14	; 0x04
     1b2:	76 be       	out	0x36, r7	; 54
     1b4:	d9 8f       	std	Y+25, r29	; 0x19
     1b6:	e1 a9       	ldd	r30, Z+49	; 0x31
     1b8:	3e 4c       	sbci	r19, 0xCE	; 206
     1ba:	80 ef       	ldi	r24, 0xF0	; 240
     1bc:	ff be       	out	0x3f, r15	; 63
     1be:	01 c4       	rjmp	.+2050   	; 0x9c2 <SMTick1+0x152>
     1c0:	ff 7f       	andi	r31, 0xFF	; 255
     1c2:	3f 00       	.word	0x003f	; ????
     1c4:	00 00       	nop
	...

000001c8 <__ctors_end>:
     1c8:	11 24       	eor	r1, r1
     1ca:	1f be       	out	0x3f, r1	; 63
     1cc:	cf ef       	ldi	r28, 0xFF	; 255
     1ce:	d0 e4       	ldi	r29, 0x40	; 64
     1d0:	de bf       	out	0x3e, r29	; 62
     1d2:	cd bf       	out	0x3d, r28	; 61

000001d4 <__do_copy_data>:
     1d4:	11 e0       	ldi	r17, 0x01	; 1
     1d6:	a0 e0       	ldi	r26, 0x00	; 0
     1d8:	b1 e0       	ldi	r27, 0x01	; 1
     1da:	e4 eb       	ldi	r30, 0xB4	; 180
     1dc:	f3 e1       	ldi	r31, 0x13	; 19
     1de:	00 e0       	ldi	r16, 0x00	; 0
     1e0:	0b bf       	out	0x3b, r16	; 59
     1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <__do_copy_data+0x14>
     1e4:	07 90       	elpm	r0, Z+
     1e6:	0d 92       	st	X+, r0
     1e8:	a8 3b       	cpi	r26, 0xB8	; 184
     1ea:	b1 07       	cpc	r27, r17
     1ec:	d9 f7       	brne	.-10     	; 0x1e4 <__do_copy_data+0x10>

000001ee <__do_clear_bss>:
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	a8 eb       	ldi	r26, 0xB8	; 184
     1f2:	b1 e0       	ldi	r27, 0x01	; 1
     1f4:	01 c0       	rjmp	.+2      	; 0x1f8 <.do_clear_bss_start>

000001f6 <.do_clear_bss_loop>:
     1f6:	1d 92       	st	X+, r1

000001f8 <.do_clear_bss_start>:
     1f8:	a5 3e       	cpi	r26, 0xE5	; 229
     1fa:	b2 07       	cpc	r27, r18
     1fc:	e1 f7       	brne	.-8      	; 0x1f6 <.do_clear_bss_loop>
     1fe:	f3 d3       	rcall	.+2022   	; 0x9e6 <main>
     200:	0c 94 d8 09 	jmp	0x13b0	; 0x13b0 <_exit>

00000204 <__bad_interrupt>:
     204:	fd ce       	rjmp	.-518    	; 0x0 <__vectors>

00000206 <delay_ms>:
        if(c==0){return b;}
        a = b;
        b = c;
    }
    return 0;
}
     206:	18 16       	cp	r1, r24
     208:	19 06       	cpc	r1, r25
     20a:	5c f0       	brlt	.+22     	; 0x222 <delay_ms+0x1c>
     20c:	08 95       	ret
     20e:	00 00       	nop
     210:	21 50       	subi	r18, 0x01	; 1
     212:	31 09       	sbc	r19, r1
     214:	e1 f7       	brne	.-8      	; 0x20e <delay_ms+0x8>
     216:	4f 5f       	subi	r20, 0xFF	; 255
     218:	5f 4f       	sbci	r21, 0xFF	; 255
     21a:	84 17       	cp	r24, r20
     21c:	95 07       	cpc	r25, r21
     21e:	19 f4       	brne	.+6      	; 0x226 <delay_ms+0x20>
     220:	08 95       	ret
     222:	40 e0       	ldi	r20, 0x00	; 0
     224:	50 e0       	ldi	r21, 0x00	; 0
     226:	27 e0       	ldi	r18, 0x07	; 7
     228:	33 e0       	ldi	r19, 0x03	; 3
     22a:	f1 cf       	rjmp	.-30     	; 0x20e <delay_ms+0x8>

0000022c <LCD_WriteCommand>:
     22c:	10 98       	cbi	0x02, 0	; 2
     22e:	8b b9       	out	0x0b, r24	; 11
     230:	11 9a       	sbi	0x02, 1	; 2
     232:	00 00       	nop
     234:	11 98       	cbi	0x02, 1	; 2
     236:	82 e0       	ldi	r24, 0x02	; 2
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	e5 cf       	rjmp	.-54     	; 0x206 <delay_ms>
     23c:	08 95       	ret

0000023e <LCD_ClearScreen>:
     23e:	81 e0       	ldi	r24, 0x01	; 1
     240:	f5 cf       	rjmp	.-22     	; 0x22c <LCD_WriteCommand>
     242:	08 95       	ret

00000244 <LCD_Cursor>:
     244:	81 31       	cpi	r24, 0x11	; 17
     246:	18 f4       	brcc	.+6      	; 0x24e <LCD_Cursor+0xa>
     248:	81 58       	subi	r24, 0x81	; 129
     24a:	f0 cf       	rjmp	.-32     	; 0x22c <LCD_WriteCommand>
     24c:	08 95       	ret
     24e:	81 55       	subi	r24, 0x51	; 81
     250:	ed cf       	rjmp	.-38     	; 0x22c <LCD_WriteCommand>
     252:	08 95       	ret

00000254 <LCD_init>:
     254:	84 e6       	ldi	r24, 0x64	; 100
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	d6 df       	rcall	.-84     	; 0x206 <delay_ms>
     25a:	88 e3       	ldi	r24, 0x38	; 56
     25c:	e7 df       	rcall	.-50     	; 0x22c <LCD_WriteCommand>
     25e:	86 e0       	ldi	r24, 0x06	; 6
     260:	e5 df       	rcall	.-54     	; 0x22c <LCD_WriteCommand>
     262:	8f e0       	ldi	r24, 0x0F	; 15
     264:	e3 df       	rcall	.-58     	; 0x22c <LCD_WriteCommand>
     266:	81 e0       	ldi	r24, 0x01	; 1
     268:	e1 df       	rcall	.-62     	; 0x22c <LCD_WriteCommand>
     26a:	8a e0       	ldi	r24, 0x0A	; 10
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	cb cf       	rjmp	.-106    	; 0x206 <delay_ms>
     270:	08 95       	ret

00000272 <LCD_WriteData>:
     272:	10 9a       	sbi	0x02, 0	; 2
     274:	8b b9       	out	0x0b, r24	; 11
     276:	11 9a       	sbi	0x02, 1	; 2
     278:	00 00       	nop
     27a:	11 98       	cbi	0x02, 1	; 2
     27c:	81 e0       	ldi	r24, 0x01	; 1
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	c2 cf       	rjmp	.-124    	; 0x206 <delay_ms>
     282:	08 95       	ret

00000284 <LCD_DisplayString>:
     284:	0f 93       	push	r16
     286:	1f 93       	push	r17
     288:	cf 93       	push	r28
     28a:	df 93       	push	r29
     28c:	18 2f       	mov	r17, r24
     28e:	eb 01       	movw	r28, r22
     290:	d6 df       	rcall	.-84     	; 0x23e <LCD_ClearScreen>
     292:	81 2f       	mov	r24, r17
     294:	d7 df       	rcall	.-82     	; 0x244 <LCD_Cursor>
     296:	88 81       	ld	r24, Y
     298:	88 23       	and	r24, r24
     29a:	51 f0       	breq	.+20     	; 0x2b0 <LCD_DisplayString+0x2c>
     29c:	01 e0       	ldi	r16, 0x01	; 1
     29e:	01 0f       	add	r16, r17
     2a0:	81 2f       	mov	r24, r17
     2a2:	d0 df       	rcall	.-96     	; 0x244 <LCD_Cursor>
     2a4:	89 91       	ld	r24, Y+
     2a6:	e5 df       	rcall	.-54     	; 0x272 <LCD_WriteData>
     2a8:	10 2f       	mov	r17, r16
     2aa:	88 81       	ld	r24, Y
     2ac:	81 11       	cpse	r24, r1
     2ae:	f6 cf       	rjmp	.-20     	; 0x29c <LCD_DisplayString+0x18>
     2b0:	df 91       	pop	r29
     2b2:	cf 91       	pop	r28
     2b4:	1f 91       	pop	r17
     2b6:	0f 91       	pop	r16
     2b8:	08 95       	ret

000002ba <SMTick3>:
     2ba:	1f 93       	push	r17
     2bc:	cf 93       	push	r28
     2be:	df 93       	push	r29
     2c0:	ec 01       	movw	r28, r24
     2c2:	00 97       	sbiw	r24, 0x00	; 0
     2c4:	41 f0       	breq	.+16     	; 0x2d6 <SMTick3+0x1c>
     2c6:	82 30       	cpi	r24, 0x02	; 2
     2c8:	91 05       	cpc	r25, r1
     2ca:	e9 f0       	breq	.+58     	; 0x306 <SMTick3+0x4c>
     2cc:	83 30       	cpi	r24, 0x03	; 3
     2ce:	91 05       	cpc	r25, r1
     2d0:	39 f1       	breq	.+78     	; 0x320 <SMTick3+0x66>
     2d2:	01 97       	sbiw	r24, 0x01	; 1
     2d4:	89 f5       	brne	.+98     	; 0x338 <SMTick3+0x7e>
     2d6:	67 e2       	ldi	r22, 0x27	; 39
     2d8:	71 e0       	ldi	r23, 0x01	; 1
     2da:	81 e0       	ldi	r24, 0x01	; 1
     2dc:	d3 df       	rcall	.-90     	; 0x284 <LCD_DisplayString>
     2de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     2e2:	88 23       	and	r24, r24
     2e4:	71 f0       	breq	.+28     	; 0x302 <SMTick3+0x48>
     2e6:	6d e2       	ldi	r22, 0x2D	; 45
     2e8:	71 e0       	ldi	r23, 0x01	; 1
     2ea:	81 e0       	ldi	r24, 0x01	; 1
     2ec:	cb df       	rcall	.-106    	; 0x284 <LCD_DisplayString>
     2ee:	8f ef       	ldi	r24, 0xFF	; 255
     2f0:	85 b9       	out	0x05, r24	; 5
     2f2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     2f6:	81 50       	subi	r24, 0x01	; 1
     2f8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     2fc:	c1 e0       	ldi	r28, 0x01	; 1
     2fe:	d0 e0       	ldi	r29, 0x00	; 0
     300:	1b c0       	rjmp	.+54     	; 0x338 <SMTick3+0x7e>
     302:	c1 e0       	ldi	r28, 0x01	; 1
     304:	d0 e0       	ldi	r29, 0x00	; 0
     306:	6e e3       	ldi	r22, 0x3E	; 62
     308:	71 e0       	ldi	r23, 0x01	; 1
     30a:	81 e0       	ldi	r24, 0x01	; 1
     30c:	bb df       	rcall	.-138    	; 0x284 <LCD_DisplayString>
     30e:	83 e0       	ldi	r24, 0x03	; 3
     310:	85 b9       	out	0x05, r24	; 5
     312:	65 e4       	ldi	r22, 0x45	; 69
     314:	71 e0       	ldi	r23, 0x01	; 1
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	b5 df       	rcall	.-150    	; 0x284 <LCD_DisplayString>
     31a:	88 e0       	ldi	r24, 0x08	; 8
     31c:	85 b9       	out	0x05, r24	; 5
     31e:	0c c0       	rjmp	.+24     	; 0x338 <SMTick3+0x7e>
     320:	6c e4       	ldi	r22, 0x4C	; 76
     322:	71 e0       	ldi	r23, 0x01	; 1
     324:	81 e0       	ldi	r24, 0x01	; 1
     326:	ae df       	rcall	.-164    	; 0x284 <LCD_DisplayString>
     328:	1f ef       	ldi	r17, 0xFF	; 255
     32a:	15 b9       	out	0x05, r17	; 5
     32c:	6c e4       	ldi	r22, 0x4C	; 76
     32e:	71 e0       	ldi	r23, 0x01	; 1
     330:	81 e0       	ldi	r24, 0x01	; 1
     332:	a8 df       	rcall	.-176    	; 0x284 <LCD_DisplayString>
     334:	15 b9       	out	0x05, r17	; 5
     336:	15 b8       	out	0x05, r1	; 5
     338:	ce 01       	movw	r24, r28
     33a:	df 91       	pop	r29
     33c:	cf 91       	pop	r28
     33e:	1f 91       	pop	r17
     340:	08 95       	ret

00000342 <TimerSet>:
     342:	60 93 1d 01 	sts	0x011D, r22	; 0x80011d <_avr_timer_M>
     346:	70 93 1e 01 	sts	0x011E, r23	; 0x80011e <_avr_timer_M+0x1>
     34a:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <_avr_timer_M+0x2>
     34e:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <_avr_timer_M+0x3>
     352:	60 93 e0 01 	sts	0x01E0, r22	; 0x8001e0 <_avr_timer_cntcurr>
     356:	70 93 e1 01 	sts	0x01E1, r23	; 0x8001e1 <_avr_timer_cntcurr+0x1>
     35a:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <_avr_timer_cntcurr+0x2>
     35e:	90 93 e3 01 	sts	0x01E3, r25	; 0x8001e3 <_avr_timer_cntcurr+0x3>
     362:	08 95       	ret

00000364 <TimerOn>:
     364:	8b e0       	ldi	r24, 0x0B	; 11
     366:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     36a:	8d e7       	ldi	r24, 0x7D	; 125
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     372:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     376:	82 e0       	ldi	r24, 0x02	; 2
     378:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     37c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     380:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     384:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <_avr_timer_M>
     388:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <_avr_timer_M+0x1>
     38c:	a0 91 1f 01 	lds	r26, 0x011F	; 0x80011f <_avr_timer_M+0x2>
     390:	b0 91 20 01 	lds	r27, 0x0120	; 0x800120 <_avr_timer_M+0x3>
     394:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <_avr_timer_cntcurr>
     398:	90 93 e1 01 	sts	0x01E1, r25	; 0x8001e1 <_avr_timer_cntcurr+0x1>
     39c:	a0 93 e2 01 	sts	0x01E2, r26	; 0x8001e2 <_avr_timer_cntcurr+0x2>
     3a0:	b0 93 e3 01 	sts	0x01E3, r27	; 0x8001e3 <_avr_timer_cntcurr+0x3>
     3a4:	8f b7       	in	r24, 0x3f	; 63
     3a6:	80 68       	ori	r24, 0x80	; 128
     3a8:	8f bf       	out	0x3f, r24	; 63
     3aa:	08 95       	ret

000003ac <__vector_13>:
     3ac:	1f 92       	push	r1
     3ae:	0f 92       	push	r0
     3b0:	0f b6       	in	r0, 0x3f	; 63
     3b2:	0f 92       	push	r0
     3b4:	11 24       	eor	r1, r1
     3b6:	8f 93       	push	r24
     3b8:	9f 93       	push	r25
     3ba:	af 93       	push	r26
     3bc:	bf 93       	push	r27
     3be:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <_avr_timer_cntcurr>
     3c2:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <_avr_timer_cntcurr+0x1>
     3c6:	a0 91 e2 01 	lds	r26, 0x01E2	; 0x8001e2 <_avr_timer_cntcurr+0x2>
     3ca:	b0 91 e3 01 	lds	r27, 0x01E3	; 0x8001e3 <_avr_timer_cntcurr+0x3>
     3ce:	01 97       	sbiw	r24, 0x01	; 1
     3d0:	a1 09       	sbc	r26, r1
     3d2:	b1 09       	sbc	r27, r1
     3d4:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <_avr_timer_cntcurr>
     3d8:	90 93 e1 01 	sts	0x01E1, r25	; 0x8001e1 <_avr_timer_cntcurr+0x1>
     3dc:	a0 93 e2 01 	sts	0x01E2, r26	; 0x8001e2 <_avr_timer_cntcurr+0x2>
     3e0:	b0 93 e3 01 	sts	0x01E3, r27	; 0x8001e3 <_avr_timer_cntcurr+0x3>
     3e4:	89 2b       	or	r24, r25
     3e6:	8a 2b       	or	r24, r26
     3e8:	8b 2b       	or	r24, r27
     3ea:	99 f4       	brne	.+38     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     3ec:	81 e0       	ldi	r24, 0x01	; 1
     3ee:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <TimerFlag>
     3f2:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <_avr_timer_M>
     3f6:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <_avr_timer_M+0x1>
     3fa:	a0 91 1f 01 	lds	r26, 0x011F	; 0x80011f <_avr_timer_M+0x2>
     3fe:	b0 91 20 01 	lds	r27, 0x0120	; 0x800120 <_avr_timer_M+0x3>
     402:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <_avr_timer_cntcurr>
     406:	90 93 e1 01 	sts	0x01E1, r25	; 0x8001e1 <_avr_timer_cntcurr+0x1>
     40a:	a0 93 e2 01 	sts	0x01E2, r26	; 0x8001e2 <_avr_timer_cntcurr+0x2>
     40e:	b0 93 e3 01 	sts	0x01E3, r27	; 0x8001e3 <_avr_timer_cntcurr+0x3>
     412:	bf 91       	pop	r27
     414:	af 91       	pop	r26
     416:	9f 91       	pop	r25
     418:	8f 91       	pop	r24
     41a:	0f 90       	pop	r0
     41c:	0f be       	out	0x3f, r0	; 63
     41e:	0f 90       	pop	r0
     420:	1f 90       	pop	r1
     422:	18 95       	reti

00000424 <ersa>:
//--------End find GCD function ----------------------------------------------

//--------Simple RSA function ------------------------------------------------
int ersa(int msg){
     424:	6f 92       	push	r6
     426:	7f 92       	push	r7
     428:	8f 92       	push	r8
     42a:	9f 92       	push	r9
     42c:	af 92       	push	r10
     42e:	bf 92       	push	r11
     430:	cf 92       	push	r12
     432:	df 92       	push	r13
     434:	ef 92       	push	r14
     436:	ff 92       	push	r15
     438:	0f 93       	push	r16
     43a:	1f 93       	push	r17
     43c:	cf 93       	push	r28
     43e:	df 93       	push	r29
     440:	ec 01       	movw	r28, r24
	double n = p*q;
	double phi = (p-1)*(q-1);

	//public key
	// e stands for encrypt
	double e = 2;
     442:	81 2c       	mov	r8, r1
     444:	91 2c       	mov	r9, r1
     446:	54 01       	movw	r10, r8
     448:	68 94       	set
     44a:	b6 f8       	bld	r11, 6

	// checks if e is greater than 0 with phi
	while(e < phi){
		if(findGCD(e,phi) == 1) break;
     44c:	0f 2e       	mov	r0, r31
     44e:	fc e0       	ldi	r31, 0x0C	; 12
     450:	6f 2e       	mov	r6, r31
     452:	f0 2d       	mov	r31, r0
     454:	71 2c       	mov	r7, r1
     456:	00 e0       	ldi	r16, 0x00	; 0
     458:	10 e0       	ldi	r17, 0x00	; 0
     45a:	c5 01       	movw	r24, r10
     45c:	b4 01       	movw	r22, r8
     45e:	21 d4       	rcall	.+2114   	; 0xca2 <__fixunssfsi>
     460:	56 2f       	mov	r21, r22
     462:	47 2f       	mov	r20, r23
     464:	38 2f       	mov	r19, r24
     466:	29 2f       	mov	r18, r25
     468:	c6 2c       	mov	r12, r6
     46a:	d7 2c       	mov	r13, r7
     46c:	e0 2e       	mov	r14, r16
     46e:	f1 2e       	mov	r15, r17
     470:	02 c0       	rjmp	.+4      	; 0x476 <ersa+0x52>
    unsigned long int c;
    while(1){
        c = a%b;
        if(c==0){return b;}
        a = b;
        b = c;
     472:	6b 01       	movw	r12, r22
     474:	7c 01       	movw	r14, r24
//--------Find GCD function --------------------------------------------------
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
    unsigned long int c;
    while(1){
        c = a%b;
     476:	65 2f       	mov	r22, r21
     478:	74 2f       	mov	r23, r20
     47a:	83 2f       	mov	r24, r19
     47c:	92 2f       	mov	r25, r18
     47e:	a7 01       	movw	r20, r14
     480:	96 01       	movw	r18, r12
     482:	6b d7       	rcall	.+3798   	; 0x135a <__udivmodsi4>
     484:	5c 2d       	mov	r21, r12
     486:	4d 2d       	mov	r20, r13
     488:	3e 2d       	mov	r19, r14
     48a:	2f 2d       	mov	r18, r15
        if(c==0){return b;}
     48c:	61 15       	cp	r22, r1
     48e:	71 05       	cpc	r23, r1
     490:	81 05       	cpc	r24, r1
     492:	91 05       	cpc	r25, r1
     494:	71 f7       	brne	.-36     	; 0x472 <ersa+0x4e>
	// e stands for encrypt
	double e = 2;

	// checks if e is greater than 0 with phi
	while(e < phi){
		if(findGCD(e,phi) == 1) break;
     496:	ca 94       	dec	r12
     498:	cd 28       	or	r12, r13
     49a:	ce 28       	or	r12, r14
     49c:	cf 28       	or	r12, r15
     49e:	81 f0       	breq	.+32     	; 0x4c0 <ersa+0x9c>
		else e++;
     4a0:	20 e0       	ldi	r18, 0x00	; 0
     4a2:	30 e0       	ldi	r19, 0x00	; 0
     4a4:	40 e8       	ldi	r20, 0x80	; 128
     4a6:	5f e3       	ldi	r21, 0x3F	; 63
     4a8:	c5 01       	movw	r24, r10
     4aa:	b4 01       	movw	r22, r8
     4ac:	8d d3       	rcall	.+1818   	; 0xbc8 <__addsf3>
     4ae:	4b 01       	movw	r8, r22
     4b0:	5c 01       	movw	r10, r24
	//public key
	// e stands for encrypt
	double e = 2;

	// checks if e is greater than 0 with phi
	while(e < phi){
     4b2:	20 e0       	ldi	r18, 0x00	; 0
     4b4:	30 e0       	ldi	r19, 0x00	; 0
     4b6:	40 e4       	ldi	r20, 0x40	; 64
     4b8:	51 e4       	ldi	r21, 0x41	; 65
     4ba:	ea d3       	rcall	.+2004   	; 0xc90 <__cmpsf2>
     4bc:	88 23       	and	r24, r24
     4be:	6c f2       	brlt	.-102    	; 0x45a <ersa+0x36>
	double k = 2;
	//double msg = 12; // length

	//ensure that the decryption key satifies the check
	d = (1+(k*phi))/e;
	double c = pow(msg,e);// encrypt the message with the encryption key
     4c0:	be 01       	movw	r22, r28
     4c2:	dd 0f       	add	r29, r29
     4c4:	88 0b       	sbc	r24, r24
     4c6:	99 0b       	sbc	r25, r25
     4c8:	1a d4       	rcall	.+2100   	; 0xcfe <__floatsisf>
     4ca:	a5 01       	movw	r20, r10
     4cc:	94 01       	movw	r18, r8
     4ce:	23 d5       	rcall	.+2630   	; 0xf16 <pow>
	c = fmod(c,n);
     4d0:	20 e0       	ldi	r18, 0x00	; 0
     4d2:	30 e0       	ldi	r19, 0x00	; 0
     4d4:	48 ea       	ldi	r20, 0xA8	; 168
     4d6:	51 e4       	ldi	r21, 0x41	; 65
     4d8:	54 d4       	rcall	.+2216   	; 0xd82 <fmod>
     4da:	de d3       	rcall	.+1980   	; 0xc98 <__fixsfsi>
	//printf("%lf",c);
	return c;
     4dc:	cb 01       	movw	r24, r22
     4de:	df 91       	pop	r29
}
     4e0:	cf 91       	pop	r28
     4e2:	1f 91       	pop	r17
     4e4:	0f 91       	pop	r16
     4e6:	ff 90       	pop	r15
     4e8:	ef 90       	pop	r14
     4ea:	df 90       	pop	r13
     4ec:	cf 90       	pop	r12
     4ee:	bf 90       	pop	r11
     4f0:	af 90       	pop	r10
     4f2:	9f 90       	pop	r9
     4f4:	8f 90       	pop	r8
     4f6:	7f 90       	pop	r7
     4f8:	6f 90       	pop	r6
     4fa:	08 95       	ret

000004fc <SMTick2>:
     4fc:	0f 93       	push	r16
     4fe:	1f 93       	push	r17
	enum SM2_States { SM2_Start, SM2_Display, SM2_Wait, SM2_Encrypt, SM2_Choice, SM2_Accept, SM2_Deny, SM2_Done, SM2_One,SM2_Two,SM2_Three,SM2_Four,SM2_Five} SM2_state;
	unsigned char tmpA = 0x00;
	unsigned char tmpB = 0x00;
	char counter = 0;
	char cCount = 2;
int SMTick2 (int SM2_state) {
     500:	cf 93       	push	r28
     502:	df 93       	push	r29
     504:	cd b7       	in	r28, 0x3d	; 61
     506:	de b7       	in	r29, 0x3e	; 62
     508:	2d 97       	sbiw	r28, 0x0d	; 13
     50a:	0f b6       	in	r0, 0x3f	; 63
     50c:	f8 94       	cli
     50e:	de bf       	out	0x3e, r29	; 62
     510:	0f be       	out	0x3f, r0	; 63
     512:	cd bf       	out	0x3d, r28	; 61
     514:	8c 01       	movw	r16, r24
	
//==================== Begin of Transitions =================
		switch (SM2_state) {
     516:	fc 01       	movw	r30, r24
     518:	31 97       	sbiw	r30, 0x01	; 1
     51a:	ec 30       	cpi	r30, 0x0C	; 12
     51c:	f1 05       	cpc	r31, r1
     51e:	88 f4       	brcc	.+34     	; 0x542 <SMTick2+0x46>
     520:	ea 5b       	subi	r30, 0xBA	; 186
     522:	ff 4f       	sbci	r31, 0xFF	; 255
     524:	3c c7       	rjmp	.+3704   	; 0x139e <__tablejump2__>
				SM2_state = SM2_Display;
				break;
				
			case SM2_Display:
				//state = SM2_Wait;
				if(column >= 11) SM2_state = SM2_Wait;break;
     526:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <column>
     52a:	8b 30       	cpi	r24, 0x0B	; 11
     52c:	a0 f5       	brcc	.+104    	; 0x596 <SMTick2+0x9a>
     52e:	09 c0       	rjmp	.+18     	; 0x542 <SMTick2+0x46>
			default:
				SM2_state = SM2_Display;
				break;
		}
// ====================== End of Transition ========================
		switch (SM2_state) {
     530:	fc 01       	movw	r30, r24
     532:	31 97       	sbiw	r30, 0x01	; 1
     534:	ec 30       	cpi	r30, 0x0C	; 12
     536:	f1 05       	cpc	r31, r1
     538:	08 f0       	brcs	.+2      	; 0x53c <SMTick2+0x40>
     53a:	40 c1       	rjmp	.+640    	; 0x7bc <SMTick2+0x2c0>
     53c:	ee 5a       	subi	r30, 0xAE	; 174
     53e:	ff 4f       	sbci	r31, 0xFF	; 255
     540:	2e c7       	rjmp	.+3676   	; 0x139e <__tablejump2__>
			case SM2_Start:		
				break;
			
			case SM2_Display:
				counter = 0;
     542:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <counter>
				if(newInput != 0) {
     546:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <newInput>
     54a:	88 23       	and	r24, r24
     54c:	09 f4       	brne	.+2      	; 0x550 <SMTick2+0x54>
     54e:	21 c1       	rjmp	.+578    	; 0x792 <SMTick2+0x296>
					column++;
     550:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <column>
     554:	8f 5f       	subi	r24, 0xFF	; 255
     556:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <column>
					if(column < 11) {
     55a:	8b 30       	cpi	r24, 0x0B	; 11
     55c:	08 f0       	brcs	.+2      	; 0x560 <SMTick2+0x64>
						asm("nop");
     55e:	1c c1       	rjmp	.+568    	; 0x798 <SMTick2+0x29c>
						LCD_Cursor(column);
     560:	00 00       	nop
     562:	70 de       	rcall	.-800    	; 0x244 <LCD_Cursor>
						if(newInput == 1) {
     564:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <newInput>
     568:	81 30       	cpi	r24, 0x01	; 1
							LCD_WriteData(keypadChar);
     56a:	79 f4       	brne	.+30     	; 0x58a <SMTick2+0x8e>
     56c:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <keypadChar>
     570:	80 de       	rcall	.-768    	; 0x272 <LCD_WriteData>
							message[count] = keypadChar;
     572:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <count>
     576:	e8 2f       	mov	r30, r24
     578:	f0 e0       	ldi	r31, 0x00	; 0
     57a:	e3 52       	subi	r30, 0x23	; 35
     57c:	fe 4f       	sbci	r31, 0xFE	; 254
     57e:	90 91 df 01 	lds	r25, 0x01DF	; 0x8001df <keypadChar>
     582:	90 83       	st	Z, r25
							count++;
     584:	8f 5f       	subi	r24, 0xFF	; 255
     586:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <count>
						}
						newInput = 0;
     58a:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <newInput>
						asm("nop");
     58e:	00 00       	nop
						break;
     590:	01 e0       	ldi	r16, 0x01	; 1
     592:	10 e0       	ldi	r17, 0x00	; 0
     594:	13 c1       	rjmp	.+550    	; 0x7bc <SMTick2+0x2c0>
				asm("nop");
				}
				break;
				
				case SM2_Wait:
					tmpA = ((~PINA) & 0x04);
     596:	80 b1       	in	r24, 0x00	; 0
     598:	80 95       	com	r24
     59a:	84 70       	andi	r24, 0x04	; 4
     59c:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <tmpA>
					tmpB = ((~PINA) & 0x08);
     5a0:	80 b1       	in	r24, 0x00	; 0
     5a2:	80 95       	com	r24
     5a4:	88 70       	andi	r24, 0x08	; 8
     5a6:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <tmpB>
					
					//LCD_Cursor(17);
					const char chatter[] = "s = A, r = B";
     5aa:	8d e0       	ldi	r24, 0x0D	; 13
     5ac:	ea ea       	ldi	r30, 0xAA	; 170
     5ae:	f1 e0       	ldi	r31, 0x01	; 1
     5b0:	de 01       	movw	r26, r28
     5b2:	11 96       	adiw	r26, 0x01	; 1
     5b4:	01 90       	ld	r0, Z+
     5b6:	0d 92       	st	X+, r0
     5b8:	8a 95       	dec	r24
     5ba:	e1 f7       	brne	.-8      	; 0x5b4 <SMTick2+0xb8>
					//LCD_init;
					LCD_DisplayString(17,chatter);
     5bc:	be 01       	movw	r22, r28
     5be:	6f 5f       	subi	r22, 0xFF	; 255
     5c0:	7f 4f       	sbci	r23, 0xFF	; 255
     5c2:	81 e1       	ldi	r24, 0x11	; 17
     5c4:	5f de       	rcall	.-834    	; 0x284 <LCD_DisplayString>

					if(tmpA && !tmpB) {
     5c6:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <tmpA>
     5ca:	88 23       	and	r24, r24
     5cc:	09 f4       	brne	.+2      	; 0x5d0 <SMTick2+0xd4>
     5ce:	f0 c0       	rjmp	.+480    	; 0x7b0 <SMTick2+0x2b4>
     5d0:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <tmpB>
     5d4:	81 11       	cpse	r24, r1
						//char ask[] = " send?";
						//strcat(encrypted,ask);
						LCD_DisplayString(1, encrypted);
     5d6:	e3 c0       	rjmp	.+454    	; 0x79e <SMTick2+0x2a2>
     5d8:	62 e0       	ldi	r22, 0x02	; 2
     5da:	71 e0       	ldi	r23, 0x01	; 1
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	52 de       	rcall	.-860    	; 0x284 <LCD_DisplayString>
						SM2_state = SM2_Encrypt;
     5e0:	03 e0       	ldi	r16, 0x03	; 3
     5e2:	10 e0       	ldi	r17, 0x00	; 0
						break;
     5e4:	eb c0       	rjmp	.+470    	; 0x7bc <SMTick2+0x2c0>
					}
					else if(tmpB && !tmpA) {
						column = 8;
     5e6:	88 e0       	ldi	r24, 0x08	; 8
     5e8:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <column>
						count = 0;
     5ec:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <count>
						LCD_DisplayString(1, "Message:");
     5f0:	6a e5       	ldi	r22, 0x5A	; 90
     5f2:	71 e0       	ldi	r23, 0x01	; 1
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	46 de       	rcall	.-884    	; 0x284 <LCD_DisplayString>
						SM2_state = SM2_Display;
     5f8:	01 e0       	ldi	r16, 0x01	; 1
     5fa:	10 e0       	ldi	r17, 0x00	; 0
						break;
     5fc:	df c0       	rjmp	.+446    	; 0x7bc <SMTick2+0x2c0>
					}
					break;
				
				
				case SM2_Encrypt:
					tmpA = ((~PINA) & 0x04);
     5fe:	80 b1       	in	r24, 0x00	; 0
     600:	80 95       	com	r24
     602:	84 70       	andi	r24, 0x04	; 4
     604:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <tmpA>
					tmpB = ((~PINA) & 0x08);
     608:	80 b1       	in	r24, 0x00	; 0
     60a:	80 95       	com	r24
     60c:	88 70       	andi	r24, 0x08	; 8
     60e:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <tmpB>
					
					
// 					for(int i = count-1; i >= 0; i--) {
// 						strcat(encrypted,ersa(message));
// 					}
					message[10] = ersa(message);
     612:	8d ed       	ldi	r24, 0xDD	; 221
     614:	91 e0       	ldi	r25, 0x01	; 1
     616:	06 df       	rcall	.-500    	; 0x424 <ersa>
     618:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <__bss_end+0x2>
					//strcat(encrypted,ersa("ABC"));
					//strcat(encrypted,message[2]);
					LCD_DisplayString(1, encrypted);
     61c:	62 e0       	ldi	r22, 0x02	; 2
     61e:	71 e0       	ldi	r23, 0x01	; 1
     620:	81 e0       	ldi	r24, 0x01	; 1
     622:	30 de       	rcall	.-928    	; 0x284 <LCD_DisplayString>
// 					char ask[] = " send?YorN";
// 					strcat(encrypted,ask);
// 					LCD_DisplayString(1, encrypted);
					//LCD_DisplayString(1,"Help me");
					tmpA = ((~PINA) & 0x04);
     624:	80 b1       	in	r24, 0x00	; 0
     626:	80 95       	com	r24
     628:	84 70       	andi	r24, 0x04	; 4
     62a:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <tmpA>
					tmpB = ((~PINA) & 0x08);
     62e:	90 b1       	in	r25, 0x00	; 0
     630:	90 95       	com	r25
     632:	98 70       	andi	r25, 0x08	; 8
     634:	90 93 da 01 	sts	0x01DA, r25	; 0x8001da <tmpB>
					if(tmpA && !tmpB) {
     638:	88 23       	and	r24, r24
     63a:	21 f0       	breq	.+8      	; 0x644 <SMTick2+0x148>
     63c:	99 23       	and	r25, r25
     63e:	09 f4       	brne	.+2      	; 0x642 <SMTick2+0x146>
     640:	b1 c0       	rjmp	.+354    	; 0x7a4 <SMTick2+0x2a8>
     642:	bc c0       	rjmp	.+376    	; 0x7bc <SMTick2+0x2c0>
						SM2_state = SM2_Choice;
						break;
					}
					
					else if(!tmpA && tmpB) {
     644:	99 23       	and	r25, r25
     646:	09 f4       	brne	.+2      	; 0x64a <SMTick2+0x14e>
     648:	b9 c0       	rjmp	.+370    	; 0x7bc <SMTick2+0x2c0>
						newInput = 0;
     64a:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <newInput>
						SM2_state = SM2_Display;
     64e:	01 e0       	ldi	r16, 0x01	; 1
     650:	10 e0       	ldi	r17, 0x00	; 0
						break;
     652:	b4 c0       	rjmp	.+360    	; 0x7bc <SMTick2+0x2c0>
					else {SM2_state = SM2_Encrypt; break;}
					break;
				
				case SM2_Choice:
				
					tmpA = ((~PINA) & 0x04);
     654:	80 b1       	in	r24, 0x00	; 0
     656:	80 95       	com	r24
     658:	84 70       	andi	r24, 0x04	; 4
     65a:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <tmpA>
					tmpB = ((~PINA) & 0x08);
     65e:	90 b1       	in	r25, 0x00	; 0
     660:	90 95       	com	r25
     662:	98 70       	andi	r25, 0x08	; 8
     664:	90 93 da 01 	sts	0x01DA, r25	; 0x8001da <tmpB>
					
					//LCD_DisplayString(1,"Help me");
					if(!tmpA && !tmpB) {
     668:	81 11       	cpse	r24, r1
     66a:	06 c0       	rjmp	.+12     	; 0x678 <SMTick2+0x17c>
     66c:	99 23       	and	r25, r25
     66e:	09 f4       	brne	.+2      	; 0x672 <SMTick2+0x176>
// 						LCD_DisplayString(1, "Denied");
// 						message[0] = '\0';
// 						PORTB = 0x00;
// 						state = SM2_Display;
// 						break;
						SM2_state = SM2_Deny;
     670:	a5 c0       	rjmp	.+330    	; 0x7bc <SMTick2+0x2c0>
     672:	06 e0       	ldi	r16, 0x06	; 6
     674:	10 e0       	ldi	r17, 0x00	; 0
						break;
					}
					else if(tmpA && !tmpB) {
     676:	a2 c0       	rjmp	.+324    	; 0x7bc <SMTick2+0x2c0>
     678:	91 11       	cpse	r25, r1
						LCD_DisplayString(1, "Sent Message");
     67a:	a0 c0       	rjmp	.+320    	; 0x7bc <SMTick2+0x2c0>
     67c:	63 e6       	ldi	r22, 0x63	; 99
     67e:	71 e0       	ldi	r23, 0x01	; 1
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	00 de       	rcall	.-1024   	; 0x284 <LCD_DisplayString>
						
						SM2_state = SM2_One;
     684:	08 e0       	ldi	r16, 0x08	; 8
     686:	10 e0       	ldi	r17, 0x00	; 0
							//					state = SM2_Choice;
						break;
     688:	99 c0       	rjmp	.+306    	; 0x7bc <SMTick2+0x2c0>
						}
						//SM2_state = SM2_Done;
						break;
				
				case SM2_Accept:
					tmpA = ((~PINA) & 0x04);
     68a:	80 b1       	in	r24, 0x00	; 0
     68c:	80 95       	com	r24
     68e:	84 70       	andi	r24, 0x04	; 4
     690:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <tmpA>
// 						for(int i = 0; i < 2; i++) {
// 							PORTB = 0xFF;
// 						}
						//SM2_state = SM2_One;
						//SM2_state = SM2_Done;
						break;
     694:	93 c0       	rjmp	.+294    	; 0x7bc <SMTick2+0x2c0>
				//	}
				//	break;
				
				case SM2_One:
					if(cCount == 0){cCount = 1;SM2_state = SM2_Two; break;}
     696:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <cCount>
     69a:	81 11       	cpse	r24, r1
     69c:	06 c0       	rjmp	.+12     	; 0x6aa <SMTick2+0x1ae>
     69e:	81 e0       	ldi	r24, 0x01	; 1
     6a0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <cCount>
     6a4:	09 e0       	ldi	r16, 0x09	; 9
     6a6:	10 e0       	ldi	r17, 0x00	; 0
					LCD_DisplayString(1,"Send FF");
     6a8:	89 c0       	rjmp	.+274    	; 0x7bc <SMTick2+0x2c0>
     6aa:	60 e7       	ldi	r22, 0x70	; 112
     6ac:	71 e0       	ldi	r23, 0x01	; 1
     6ae:	81 e0       	ldi	r24, 0x01	; 1
     6b0:	e9 dd       	rcall	.-1070   	; 0x284 <LCD_DisplayString>
					PORTB = 0xFF;
     6b2:	8f ef       	ldi	r24, 0xFF	; 255
     6b4:	85 b9       	out	0x05, r24	; 5
					cCount--;
     6b6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <cCount>
     6ba:	81 50       	subi	r24, 0x01	; 1
     6bc:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <cCount>
					SM2_state = SM2_One;
				case SM2_Two:
					if(cCount == 0){cCount = 1;SM2_state = SM2_Three; break;}
     6c0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <cCount>
     6c4:	81 11       	cpse	r24, r1
     6c6:	06 c0       	rjmp	.+12     	; 0x6d4 <SMTick2+0x1d8>
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <cCount>
     6ce:	0a e0       	ldi	r16, 0x0A	; 10
     6d0:	10 e0       	ldi	r17, 0x00	; 0
					LCD_DisplayString(1,"Send A");
     6d2:	74 c0       	rjmp	.+232    	; 0x7bc <SMTick2+0x2c0>
     6d4:	68 e7       	ldi	r22, 0x78	; 120
     6d6:	71 e0       	ldi	r23, 0x01	; 1
     6d8:	81 e0       	ldi	r24, 0x01	; 1
     6da:	d4 dd       	rcall	.-1112   	; 0x284 <LCD_DisplayString>
					PORTB = 'A';
     6dc:	81 e4       	ldi	r24, 0x41	; 65
     6de:	85 b9       	out	0x05, r24	; 5
					cCount--;
     6e0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <cCount>
     6e4:	81 50       	subi	r24, 0x01	; 1
     6e6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <cCount>
					SM2_state = SM2_Two;
     6ea:	09 e0       	ldi	r16, 0x09	; 9
     6ec:	10 e0       	ldi	r17, 0x00	; 0
					
					//SM2_state = SM2_Three;
					break;
     6ee:	66 c0       	rjmp	.+204    	; 0x7bc <SMTick2+0x2c0>
				case SM2_Three:
					if(cCount == 0){cCount = 1;SM2_state = SM2_Four; break;}
     6f0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <cCount>
     6f4:	81 11       	cpse	r24, r1
     6f6:	06 c0       	rjmp	.+12     	; 0x704 <SMTick2+0x208>
     6f8:	81 e0       	ldi	r24, 0x01	; 1
     6fa:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <cCount>
     6fe:	0b e0       	ldi	r16, 0x0B	; 11
     700:	10 e0       	ldi	r17, 0x00	; 0
					LCD_DisplayString(1,"Send B");
     702:	5c c0       	rjmp	.+184    	; 0x7bc <SMTick2+0x2c0>
     704:	6f e7       	ldi	r22, 0x7F	; 127
     706:	71 e0       	ldi	r23, 0x01	; 1
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	bc dd       	rcall	.-1160   	; 0x284 <LCD_DisplayString>
					PORTB = 'B';
     70c:	82 e4       	ldi	r24, 0x42	; 66
     70e:	85 b9       	out	0x05, r24	; 5
					cCount--;
     710:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <cCount>
     714:	81 50       	subi	r24, 0x01	; 1
     716:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <cCount>
					SM2_state = SM2_Three;
     71a:	0a e0       	ldi	r16, 0x0A	; 10
     71c:	10 e0       	ldi	r17, 0x00	; 0
					//SM2_state = SM2_Four;
					break;
     71e:	4e c0       	rjmp	.+156    	; 0x7bc <SMTick2+0x2c0>
				case SM2_Four:
					if(cCount == 0) {cCount = 1; SM2_state = SM2_Five; break;}
     720:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <cCount>
     724:	81 11       	cpse	r24, r1
     726:	06 c0       	rjmp	.+12     	; 0x734 <SMTick2+0x238>
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <cCount>
     72e:	0c e0       	ldi	r16, 0x0C	; 12
     730:	10 e0       	ldi	r17, 0x00	; 0
					LCD_DisplayString(1,"Send C");
     732:	44 c0       	rjmp	.+136    	; 0x7bc <SMTick2+0x2c0>
     734:	66 e8       	ldi	r22, 0x86	; 134
     736:	71 e0       	ldi	r23, 0x01	; 1
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	a4 dd       	rcall	.-1208   	; 0x284 <LCD_DisplayString>
					PORTB = 'C';
     73c:	83 e4       	ldi	r24, 0x43	; 67
     73e:	85 b9       	out	0x05, r24	; 5
					cCount--;
     740:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <cCount>
     744:	81 50       	subi	r24, 0x01	; 1
     746:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <cCount>
					SM2_state = SM2_Four;
     74a:	0b e0       	ldi	r16, 0x0B	; 11
					//SM2_state = SM2_Five;
					break;
     74c:	10 e0       	ldi	r17, 0x00	; 0
				case SM2_Five:
					if(cCount == 0){SM2_state = SM2_Done;break;}
     74e:	36 c0       	rjmp	.+108    	; 0x7bc <SMTick2+0x2c0>
     750:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <cCount>
     754:	88 23       	and	r24, r24
				
					LCD_DisplayString(1,"Send FF Last");
     756:	49 f1       	breq	.+82     	; 0x7aa <SMTick2+0x2ae>
     758:	6d e8       	ldi	r22, 0x8D	; 141
     75a:	71 e0       	ldi	r23, 0x01	; 1
     75c:	81 e0       	ldi	r24, 0x01	; 1
					PORTB = 0xFF;
     75e:	92 dd       	rcall	.-1244   	; 0x284 <LCD_DisplayString>
     760:	8f ef       	ldi	r24, 0xFF	; 255
					cCount--;
     762:	85 b9       	out	0x05, r24	; 5
     764:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <cCount>
     768:	81 50       	subi	r24, 0x01	; 1
     76a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <cCount>
					SM2_state = SM2_Five;
					
					break;
     76e:	0c e0       	ldi	r16, 0x0C	; 12
			
			
				case SM2_Deny:
					LCD_DisplayString(1, "Denied");
     770:	10 e0       	ldi	r17, 0x00	; 0
     772:	24 c0       	rjmp	.+72     	; 0x7bc <SMTick2+0x2c0>
     774:	6a e9       	ldi	r22, 0x9A	; 154
     776:	71 e0       	ldi	r23, 0x01	; 1
     778:	81 e0       	ldi	r24, 0x01	; 1
					message[0] = '\0';
     77a:	84 dd       	rcall	.-1272   	; 0x284 <LCD_DisplayString>
     77c:	10 92 dd 01 	sts	0x01DD, r1	; 0x8001dd <message>
					PORTB = 0x00;
					SM2_state = SM2_Display;
     780:	15 b8       	out	0x05, r1	; 5
     782:	01 e0       	ldi	r16, 0x01	; 1
					break;
     784:	10 e0       	ldi	r17, 0x00	; 0
					break;
					
				case SM2_Done:
					LCD_DisplayString(1,"All Done");
     786:	1a c0       	rjmp	.+52     	; 0x7bc <SMTick2+0x2c0>
     788:	61 ea       	ldi	r22, 0xA1	; 161
     78a:	71 e0       	ldi	r23, 0x01	; 1
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	7a dd       	rcall	.-1292   	; 0x284 <LCD_DisplayString>
					break;
     790:	15 c0       	rjmp	.+42     	; 0x7bc <SMTick2+0x2c0>
     792:	01 e0       	ldi	r16, 0x01	; 1
     794:	10 e0       	ldi	r17, 0x00	; 0
     796:	12 c0       	rjmp	.+36     	; 0x7bc <SMTick2+0x2c0>
						newInput = 0;
						asm("nop");
						break;
					}
				else {
					SM2_state = SM2_Wait;
     798:	02 e0       	ldi	r16, 0x02	; 2
     79a:	10 e0       	ldi	r17, 0x00	; 0
     79c:	0f c0       	rjmp	.+30     	; 0x7bc <SMTick2+0x2c0>
						SM2_state = SM2_Display;
						break;
					}
					
					else{
						SM2_state = SM2_Wait;
     79e:	02 e0       	ldi	r16, 0x02	; 2
     7a0:	10 e0       	ldi	r17, 0x00	; 0
     7a2:	0c c0       	rjmp	.+24     	; 0x7bc <SMTick2+0x2c0>
// 					LCD_DisplayString(1, encrypted);
					//LCD_DisplayString(1,"Help me");
					tmpA = ((~PINA) & 0x04);
					tmpB = ((~PINA) & 0x08);
					if(tmpA && !tmpB) {
						SM2_state = SM2_Choice;
     7a4:	04 e0       	ldi	r16, 0x04	; 4
     7a6:	10 e0       	ldi	r17, 0x00	; 0
     7a8:	09 c0       	rjmp	.+18     	; 0x7bc <SMTick2+0x2c0>
					cCount--;
					SM2_state = SM2_Four;
					//SM2_state = SM2_Five;
					break;
				case SM2_Five:
					if(cCount == 0){SM2_state = SM2_Done;break;}
     7aa:	07 e0       	ldi	r16, 0x07	; 7
     7ac:	10 e0       	ldi	r17, 0x00	; 0
     7ae:	06 c0       	rjmp	.+12     	; 0x7bc <SMTick2+0x2c0>
						//strcat(encrypted,ask);
						LCD_DisplayString(1, encrypted);
						SM2_state = SM2_Encrypt;
						break;
					}
					else if(tmpB && !tmpA) {
     7b0:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <tmpB>
     7b4:	81 11       	cpse	r24, r1
     7b6:	17 cf       	rjmp	.-466    	; 0x5e6 <SMTick2+0xea>
						SM2_state = SM2_Display;
						break;
					}
					
					else{
						SM2_state = SM2_Wait;
     7b8:	02 e0       	ldi	r16, 0x02	; 2
     7ba:	10 e0       	ldi	r17, 0x00	; 0
					
				default:
					break;
		}
	return SM2_state;
}
     7bc:	c8 01       	movw	r24, r16
     7be:	2d 96       	adiw	r28, 0x0d	; 13
     7c0:	0f b6       	in	r0, 0x3f	; 63
     7c2:	f8 94       	cli
     7c4:	de bf       	out	0x3e, r29	; 62
     7c6:	0f be       	out	0x3f, r0	; 63
     7c8:	cd bf       	out	0x3d, r28	; 61
     7ca:	df 91       	pop	r29
     7cc:	cf 91       	pop	r28
     7ce:	1f 91       	pop	r17
     7d0:	0f 91       	pop	r16
     7d2:	08 95       	ret

000007d4 <GetKeypadKey>:
//--------End Shared Variables------------------------------------------------


unsigned char GetKeypadKey() {

	PORTC = 0xEF; // Enable col 4 with 0, disable others with 1?s
     7d4:	8f ee       	ldi	r24, 0xEF	; 239
     7d6:	88 b9       	out	0x08, r24	; 8
	asm("nop"); // add a delay to allow PORTC to stabilize before checking
     7d8:	00 00       	nop
	if (GetBit(PINC,0)==0) { return('1'); }
     7da:	30 9b       	sbis	0x06, 0	; 6
     7dc:	29 c0       	rjmp	.+82     	; 0x830 <GetKeypadKey+0x5c>
	if (GetBit(PINC,1)==0) { return('4'); }
     7de:	31 9b       	sbis	0x06, 1	; 6
     7e0:	29 c0       	rjmp	.+82     	; 0x834 <GetKeypadKey+0x60>
	if (GetBit(PINC,2)==0) { return('7'); }
     7e2:	32 9b       	sbis	0x06, 2	; 6
     7e4:	29 c0       	rjmp	.+82     	; 0x838 <GetKeypadKey+0x64>
	if (GetBit(PINC,3)==0) { return('*'); }
     7e6:	33 9b       	sbis	0x06, 3	; 6
     7e8:	29 c0       	rjmp	.+82     	; 0x83c <GetKeypadKey+0x68>

	// Check keys in col 2
	PORTC = 0xDF; // Enable col 5 with 0, disable others with 1?s
     7ea:	8f ed       	ldi	r24, 0xDF	; 223
     7ec:	88 b9       	out	0x08, r24	; 8
	asm("nop"); // add a delay to allow PORTC to stabilize before checking
     7ee:	00 00       	nop
	if (GetBit(PINC,0)==0) { return('2'); }
     7f0:	30 9b       	sbis	0x06, 0	; 6
     7f2:	26 c0       	rjmp	.+76     	; 0x840 <GetKeypadKey+0x6c>
	if (GetBit(PINC,1)==0) { return('5'); }
     7f4:	31 9b       	sbis	0x06, 1	; 6
     7f6:	26 c0       	rjmp	.+76     	; 0x844 <GetKeypadKey+0x70>
	if (GetBit(PINC,2)==0) { return('8'); }
     7f8:	32 9b       	sbis	0x06, 2	; 6
     7fa:	26 c0       	rjmp	.+76     	; 0x848 <GetKeypadKey+0x74>
	if (GetBit(PINC,3)==0) { return('0'); }
     7fc:	33 9b       	sbis	0x06, 3	; 6
     7fe:	26 c0       	rjmp	.+76     	; 0x84c <GetKeypadKey+0x78>

	// Check keys in col 3
	PORTC = 0xBF; // Enable col 6 with 0, disable others with 1?s
     800:	8f eb       	ldi	r24, 0xBF	; 191
     802:	88 b9       	out	0x08, r24	; 8
	asm("nop"); // add a delay to allow PORTC to stabilize before checking
     804:	00 00       	nop
	if (GetBit(PINC,0)==0) { return('3'); }
     806:	30 9b       	sbis	0x06, 0	; 6
     808:	23 c0       	rjmp	.+70     	; 0x850 <GetKeypadKey+0x7c>
	if (GetBit(PINC,1)==0) { return('6'); }
     80a:	31 9b       	sbis	0x06, 1	; 6
     80c:	23 c0       	rjmp	.+70     	; 0x854 <GetKeypadKey+0x80>
	if (GetBit(PINC,2)==0) { return('9'); }
     80e:	32 9b       	sbis	0x06, 2	; 6
     810:	23 c0       	rjmp	.+70     	; 0x858 <GetKeypadKey+0x84>
	if (GetBit(PINC,3)==0) { return('#'); }
     812:	33 9b       	sbis	0x06, 3	; 6
     814:	23 c0       	rjmp	.+70     	; 0x85c <GetKeypadKey+0x88>

	// Check keys in col 4
	PORTC = 0x7F; // Enable col 7 with 0, disable others with 1?s
     816:	8f e7       	ldi	r24, 0x7F	; 127
     818:	88 b9       	out	0x08, r24	; 8
	asm("nop"); // add a delay to allow PORTC to stabilize before checking
     81a:	00 00       	nop
	if (GetBit(PINC,0)==0) { return('A'); }
     81c:	30 9b       	sbis	0x06, 0	; 6
     81e:	20 c0       	rjmp	.+64     	; 0x860 <GetKeypadKey+0x8c>
	if (GetBit(PINC,1)==0) { return('B'); }
     820:	31 9b       	sbis	0x06, 1	; 6
     822:	20 c0       	rjmp	.+64     	; 0x864 <GetKeypadKey+0x90>
	if (GetBit(PINC,2)==0) { return('C'); }
     824:	32 9b       	sbis	0x06, 2	; 6
     826:	20 c0       	rjmp	.+64     	; 0x868 <GetKeypadKey+0x94>
	if (GetBit(PINC,3)==0) { return('D'); }
     828:	33 9b       	sbis	0x06, 3	; 6
     82a:	20 c0       	rjmp	.+64     	; 0x86c <GetKeypadKey+0x98>

	return('\0'); // default value
     82c:	80 e0       	ldi	r24, 0x00	; 0
     82e:	08 95       	ret

unsigned char GetKeypadKey() {

	PORTC = 0xEF; // Enable col 4 with 0, disable others with 1?s
	asm("nop"); // add a delay to allow PORTC to stabilize before checking
	if (GetBit(PINC,0)==0) { return('1'); }
     830:	81 e3       	ldi	r24, 0x31	; 49
     832:	08 95       	ret
	if (GetBit(PINC,1)==0) { return('4'); }
     834:	84 e3       	ldi	r24, 0x34	; 52
     836:	08 95       	ret
	if (GetBit(PINC,2)==0) { return('7'); }
     838:	87 e3       	ldi	r24, 0x37	; 55
     83a:	08 95       	ret
	if (GetBit(PINC,3)==0) { return('*'); }
     83c:	8a e2       	ldi	r24, 0x2A	; 42
     83e:	08 95       	ret

	// Check keys in col 2
	PORTC = 0xDF; // Enable col 5 with 0, disable others with 1?s
	asm("nop"); // add a delay to allow PORTC to stabilize before checking
	if (GetBit(PINC,0)==0) { return('2'); }
     840:	82 e3       	ldi	r24, 0x32	; 50
     842:	08 95       	ret
	if (GetBit(PINC,1)==0) { return('5'); }
     844:	85 e3       	ldi	r24, 0x35	; 53
     846:	08 95       	ret
	if (GetBit(PINC,2)==0) { return('8'); }
     848:	88 e3       	ldi	r24, 0x38	; 56
     84a:	08 95       	ret
	if (GetBit(PINC,3)==0) { return('0'); }
     84c:	80 e3       	ldi	r24, 0x30	; 48
     84e:	08 95       	ret

	// Check keys in col 3
	PORTC = 0xBF; // Enable col 6 with 0, disable others with 1?s
	asm("nop"); // add a delay to allow PORTC to stabilize before checking
	if (GetBit(PINC,0)==0) { return('3'); }
     850:	83 e3       	ldi	r24, 0x33	; 51
     852:	08 95       	ret
	if (GetBit(PINC,1)==0) { return('6'); }
     854:	86 e3       	ldi	r24, 0x36	; 54
     856:	08 95       	ret
	if (GetBit(PINC,2)==0) { return('9'); }
     858:	89 e3       	ldi	r24, 0x39	; 57
     85a:	08 95       	ret
	if (GetBit(PINC,3)==0) { return('#'); }
     85c:	83 e2       	ldi	r24, 0x23	; 35
     85e:	08 95       	ret

	// Check keys in col 4
	PORTC = 0x7F; // Enable col 7 with 0, disable others with 1?s
	asm("nop"); // add a delay to allow PORTC to stabilize before checking
	if (GetBit(PINC,0)==0) { return('A'); }
     860:	81 e4       	ldi	r24, 0x41	; 65
     862:	08 95       	ret
	if (GetBit(PINC,1)==0) { return('B'); }
     864:	82 e4       	ldi	r24, 0x42	; 66
     866:	08 95       	ret
	if (GetBit(PINC,2)==0) { return('C'); }
     868:	83 e4       	ldi	r24, 0x43	; 67
     86a:	08 95       	ret
	if (GetBit(PINC,3)==0) { return('D'); }
     86c:	84 e4       	ldi	r24, 0x44	; 68

	return('\0'); // default value

}
     86e:	08 95       	ret

00000870 <SMTick1>:

enum SM1_States { SM1_Start, SM1_wait, SM1_keypadPress};
	
int SMTick1(int state) {
     870:	cf 93       	push	r28
     872:	df 93       	push	r29
     874:	ec 01       	movw	r28, r24
	unsigned char keypadPress = GetKeypadKey();
     876:	ae df       	rcall	.-164    	; 0x7d4 <GetKeypadKey>
	
	switch (state) {
     878:	c1 30       	cpi	r28, 0x01	; 1
     87a:	d1 05       	cpc	r29, r1
     87c:	19 f0       	breq	.+6      	; 0x884 <SMTick1+0x14>
     87e:	22 97       	sbiw	r28, 0x02	; 2
     880:	21 f0       	breq	.+8      	; 0x88a <SMTick1+0x1a>
     882:	a8 c0       	rjmp	.+336    	; 0x9d4 <SMTick1+0x164>
		case SM1_Start:
			state = SM1_wait;
			break;
		case SM1_wait:
			if(keypadPress != '\0') {
     884:	81 11       	cpse	r24, r1
     886:	04 c0       	rjmp	.+8      	; 0x890 <SMTick1+0x20>
     888:	aa c0       	rjmp	.+340    	; 0x9de <SMTick1+0x16e>
				state = SM1_keypadPress;
			}
			break;
		
		case SM1_keypadPress:
			if(keypadPress == '\0') {
     88a:	88 23       	and	r24, r24
     88c:	09 f4       	brne	.+2      	; 0x890 <SMTick1+0x20>
     88e:	a5 c0       	rjmp	.+330    	; 0x9da <SMTick1+0x16a>
	switch (state) {
		case SM1_wait:
			break;
			
	case SM1_keypadPress:
		switch (keypadPress) {
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	85 34       	cpi	r24, 0x45	; 69
     894:	91 05       	cpc	r25, r1
     896:	08 f0       	brcs	.+2      	; 0x89a <SMTick1+0x2a>
     898:	97 c0       	rjmp	.+302    	; 0x9c8 <SMTick1+0x158>
     89a:	fc 01       	movw	r30, r24
     89c:	e2 5a       	subi	r30, 0xA2	; 162
     89e:	ff 4f       	sbci	r31, 0xFF	; 255
     8a0:	7e c5       	rjmp	.+2812   	; 0x139e <__tablejump2__>
			asm("nop");
			case '\0': newInput = 0; break;
     8a2:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <newInput>
     8a6:	c2 e0       	ldi	r28, 0x02	; 2
     8a8:	d0 e0       	ldi	r29, 0x00	; 0
     8aa:	99 c0       	rjmp	.+306    	; 0x9de <SMTick1+0x16e>
			case '0': keypadChar = '0'; newInput = 1;break;
     8ac:	80 e3       	ldi	r24, 0x30	; 48
     8ae:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <keypadChar>
     8b2:	81 e0       	ldi	r24, 0x01	; 1
     8b4:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <newInput>
     8b8:	c2 e0       	ldi	r28, 0x02	; 2
     8ba:	d0 e0       	ldi	r29, 0x00	; 0
     8bc:	90 c0       	rjmp	.+288    	; 0x9de <SMTick1+0x16e>
			case '1': keypadChar = '1'; newInput = 1;break; // hex equivalent
     8be:	81 e3       	ldi	r24, 0x31	; 49
     8c0:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <keypadChar>
     8c4:	81 e0       	ldi	r24, 0x01	; 1
     8c6:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <newInput>
     8ca:	c2 e0       	ldi	r28, 0x02	; 2
     8cc:	d0 e0       	ldi	r29, 0x00	; 0
     8ce:	87 c0       	rjmp	.+270    	; 0x9de <SMTick1+0x16e>
			case '2': keypadChar = '2'; newInput = 1;break;
     8d0:	82 e3       	ldi	r24, 0x32	; 50
     8d2:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <keypadChar>
     8d6:	81 e0       	ldi	r24, 0x01	; 1
     8d8:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <newInput>
     8dc:	c2 e0       	ldi	r28, 0x02	; 2
     8de:	d0 e0       	ldi	r29, 0x00	; 0
     8e0:	7e c0       	rjmp	.+252    	; 0x9de <SMTick1+0x16e>
			case '3': keypadChar = '3'; newInput = 1;break;
     8e2:	83 e3       	ldi	r24, 0x33	; 51
     8e4:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <keypadChar>
     8e8:	81 e0       	ldi	r24, 0x01	; 1
     8ea:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <newInput>
     8ee:	c2 e0       	ldi	r28, 0x02	; 2
     8f0:	d0 e0       	ldi	r29, 0x00	; 0
     8f2:	75 c0       	rjmp	.+234    	; 0x9de <SMTick1+0x16e>
			case '4': keypadChar = '4'; newInput = 1;break;
     8f4:	84 e3       	ldi	r24, 0x34	; 52
     8f6:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <keypadChar>
     8fa:	81 e0       	ldi	r24, 0x01	; 1
     8fc:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <newInput>
     900:	c2 e0       	ldi	r28, 0x02	; 2
     902:	d0 e0       	ldi	r29, 0x00	; 0
     904:	6c c0       	rjmp	.+216    	; 0x9de <SMTick1+0x16e>
			case '5': keypadChar = '5'; newInput = 1;break;
     906:	85 e3       	ldi	r24, 0x35	; 53
     908:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <keypadChar>
     90c:	81 e0       	ldi	r24, 0x01	; 1
     90e:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <newInput>
     912:	c2 e0       	ldi	r28, 0x02	; 2
     914:	d0 e0       	ldi	r29, 0x00	; 0
     916:	63 c0       	rjmp	.+198    	; 0x9de <SMTick1+0x16e>
			case '6': keypadChar = '6'; newInput = 1;break;
     918:	86 e3       	ldi	r24, 0x36	; 54
     91a:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <keypadChar>
     91e:	81 e0       	ldi	r24, 0x01	; 1
     920:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <newInput>
     924:	c2 e0       	ldi	r28, 0x02	; 2
     926:	d0 e0       	ldi	r29, 0x00	; 0
     928:	5a c0       	rjmp	.+180    	; 0x9de <SMTick1+0x16e>
			case '7': keypadChar = '7'; newInput = 1;break;
     92a:	87 e3       	ldi	r24, 0x37	; 55
     92c:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <keypadChar>
     930:	81 e0       	ldi	r24, 0x01	; 1
     932:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <newInput>
     936:	c2 e0       	ldi	r28, 0x02	; 2
     938:	d0 e0       	ldi	r29, 0x00	; 0
     93a:	51 c0       	rjmp	.+162    	; 0x9de <SMTick1+0x16e>
			case '8': keypadChar = '8'; newInput = 1;break;
     93c:	88 e3       	ldi	r24, 0x38	; 56
     93e:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <keypadChar>
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <newInput>
     948:	c2 e0       	ldi	r28, 0x02	; 2
     94a:	d0 e0       	ldi	r29, 0x00	; 0
     94c:	48 c0       	rjmp	.+144    	; 0x9de <SMTick1+0x16e>
			case '9': keypadChar = '9'; newInput = 1;break;
     94e:	89 e3       	ldi	r24, 0x39	; 57
     950:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <keypadChar>
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <newInput>
     95a:	c2 e0       	ldi	r28, 0x02	; 2
     95c:	d0 e0       	ldi	r29, 0x00	; 0
     95e:	3f c0       	rjmp	.+126    	; 0x9de <SMTick1+0x16e>
			case 'A': keypadChar = 'A'; newInput = 1;break;
     960:	81 e4       	ldi	r24, 0x41	; 65
     962:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <keypadChar>
     966:	81 e0       	ldi	r24, 0x01	; 1
     968:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <newInput>
     96c:	c2 e0       	ldi	r28, 0x02	; 2
     96e:	d0 e0       	ldi	r29, 0x00	; 0
     970:	36 c0       	rjmp	.+108    	; 0x9de <SMTick1+0x16e>
			case 'B': keypadChar = 'B'; newInput = 1;break;
     972:	82 e4       	ldi	r24, 0x42	; 66
     974:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <keypadChar>
     978:	81 e0       	ldi	r24, 0x01	; 1
     97a:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <newInput>
     97e:	c2 e0       	ldi	r28, 0x02	; 2
     980:	d0 e0       	ldi	r29, 0x00	; 0
     982:	2d c0       	rjmp	.+90     	; 0x9de <SMTick1+0x16e>
			case 'C': keypadChar = 'C'; newInput = 1;break; 
     984:	83 e4       	ldi	r24, 0x43	; 67
     986:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <keypadChar>
     98a:	81 e0       	ldi	r24, 0x01	; 1
     98c:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <newInput>
     990:	c2 e0       	ldi	r28, 0x02	; 2
     992:	d0 e0       	ldi	r29, 0x00	; 0
     994:	24 c0       	rjmp	.+72     	; 0x9de <SMTick1+0x16e>
			case 'D': keypadChar = 'D'; newInput = 1;break;
     996:	84 e4       	ldi	r24, 0x44	; 68
     998:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <keypadChar>
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <newInput>
     9a2:	c2 e0       	ldi	r28, 0x02	; 2
     9a4:	d0 e0       	ldi	r29, 0x00	; 0
     9a6:	1b c0       	rjmp	.+54     	; 0x9de <SMTick1+0x16e>
			case '*': keypadChar = '*'; newInput = 0;break;
     9a8:	8a e2       	ldi	r24, 0x2A	; 42
     9aa:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <keypadChar>
     9ae:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <newInput>
     9b2:	c2 e0       	ldi	r28, 0x02	; 2
     9b4:	d0 e0       	ldi	r29, 0x00	; 0
     9b6:	13 c0       	rjmp	.+38     	; 0x9de <SMTick1+0x16e>
			case '#': keypadChar = '#'; newInput = 0;break;
     9b8:	83 e2       	ldi	r24, 0x23	; 35
     9ba:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <keypadChar>
     9be:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <newInput>
     9c2:	c2 e0       	ldi	r28, 0x02	; 2
     9c4:	d0 e0       	ldi	r29, 0x00	; 0
     9c6:	0b c0       	rjmp	.+22     	; 0x9de <SMTick1+0x16e>
			default: keypadChar = 0x20; break; // Should never occur.
     9c8:	80 e2       	ldi	r24, 0x20	; 32
     9ca:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <keypadChar>
     9ce:	c2 e0       	ldi	r28, 0x02	; 2
     9d0:	d0 e0       	ldi	r29, 0x00	; 0
     9d2:	05 c0       	rjmp	.+10     	; 0x9de <SMTick1+0x16e>
int SMTick1(int state) {
	unsigned char keypadPress = GetKeypadKey();
	
	switch (state) {
		case SM1_Start:
			state = SM1_wait;
     9d4:	c1 e0       	ldi	r28, 0x01	; 1
     9d6:	d0 e0       	ldi	r29, 0x00	; 0
     9d8:	02 c0       	rjmp	.+4      	; 0x9de <SMTick1+0x16e>
     9da:	c1 e0       	ldi	r28, 0x01	; 1
     9dc:	d0 e0       	ldi	r29, 0x00	; 0
			
		default:
			break;
		}
	return state;
}
     9de:	ce 01       	movw	r24, r28
     9e0:	df 91       	pop	r29
     9e2:	cf 91       	pop	r28
     9e4:	08 95       	ret

000009e6 <main>:
	}
	return SM3_state;
}

int main(void)
{
     9e6:	cf 93       	push	r28
     9e8:	df 93       	push	r29
     9ea:	cd b7       	in	r28, 0x3d	; 61
     9ec:	de b7       	in	r29, 0x3e	; 62
     9ee:	63 97       	sbiw	r28, 0x13	; 19
     9f0:	0f b6       	in	r0, 0x3f	; 63
     9f2:	f8 94       	cli
     9f4:	de bf       	out	0x3e, r29	; 62
     9f6:	0f be       	out	0x3f, r0	; 63
     9f8:	cd bf       	out	0x3d, r28	; 61
// Set Data Direction Registers
DDRA = 0xFF; PORTA = 0x3F; // LCD control lines
     9fa:	8f ef       	ldi	r24, 0xFF	; 255
     9fc:	81 b9       	out	0x01, r24	; 1
     9fe:	9f e3       	ldi	r25, 0x3F	; 63
     a00:	92 b9       	out	0x02, r25	; 2
DDRC = 0xF0; PORTC = 0x0F; // Keypad
     a02:	90 ef       	ldi	r25, 0xF0	; 240
     a04:	97 b9       	out	0x07, r25	; 7
     a06:	9f e0       	ldi	r25, 0x0F	; 15
     a08:	98 b9       	out	0x08, r25	; 8
DDRD = 0xFF; PORTD = 0x00; // LCD data lines
     a0a:	8a b9       	out	0x0a, r24	; 10
     a0c:	1b b8       	out	0x0b, r1	; 11
DDRB = 0xFF; PORTB = 0x00; // Xbee Data lines
     a0e:	84 b9       	out	0x04, r24	; 4
     a10:	15 b8       	out	0x05, r1	; 5
     a12:	0f 2e       	mov	r0, r31
     a14:	f0 e9       	ldi	r31, 0x90	; 144
     a16:	ef 2e       	mov	r14, r31
     a18:	f0 2d       	mov	r31, r0
     a1a:	ff 24       	eor	r15, r15
     a1c:	f3 94       	inc	r15
     a1e:	00 e0       	ldi	r16, 0x00	; 0
     a20:	10 e0       	ldi	r17, 0x00	; 0
     a22:	52 e3       	ldi	r21, 0x32	; 50
     a24:	40 e0       	ldi	r20, 0x00	; 0
     a26:	30 e0       	ldi	r19, 0x00	; 0
     a28:	20 e0       	ldi	r18, 0x00	; 0
     a2a:	04 c0       	rjmp	.+8      	; 0xa34 <main+0x4e>
    unsigned long int c;
    while(1){
        c = a%b;
        if(c==0){return b;}
        a = b;
        b = c;
     a2c:	e6 2e       	mov	r14, r22
     a2e:	f7 2e       	mov	r15, r23
     a30:	08 2f       	mov	r16, r24
     a32:	19 2f       	mov	r17, r25
//--------Find GCD function --------------------------------------------------
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
    unsigned long int c;
    while(1){
        c = a%b;
     a34:	65 2f       	mov	r22, r21
     a36:	74 2f       	mov	r23, r20
     a38:	83 2f       	mov	r24, r19
     a3a:	92 2f       	mov	r25, r18
     a3c:	2e 2d       	mov	r18, r14
     a3e:	3f 2d       	mov	r19, r15
     a40:	40 2f       	mov	r20, r16
     a42:	51 2f       	mov	r21, r17
     a44:	8a d4       	rcall	.+2324   	; 0x135a <__udivmodsi4>
     a46:	5e 2d       	mov	r21, r14
     a48:	4f 2d       	mov	r20, r15
     a4a:	30 2f       	mov	r19, r16
     a4c:	21 2f       	mov	r18, r17
        if(c==0){return b;}
     a4e:	61 15       	cp	r22, r1
     a50:	71 05       	cpc	r23, r1
     a52:	81 05       	cpc	r24, r1
     a54:	91 05       	cpc	r25, r1
     a56:	51 f7       	brne	.-44     	; 0xa2c <main+0x46>
/*tmpGCD = findGCD(tmpGCD, SMTick4_calc);*/
// Greatest common divisor for all tasks or smallest time unit for tasks
unsigned long int GCD = tmpGCD;

//Recalculate GCD periods for scheduler
unsigned long int SMTick1_period = SMTick1_calc / GCD;
     a58:	64 e6       	ldi	r22, 0x64	; 100
     a5a:	70 e0       	ldi	r23, 0x00	; 0
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	2e 2d       	mov	r18, r14
     a62:	3f 2d       	mov	r19, r15
     a64:	40 2f       	mov	r20, r16
     a66:	51 2f       	mov	r21, r17
     a68:	78 d4       	rcall	.+2288   	; 0x135a <__udivmodsi4>
     a6a:	28 8b       	std	Y+16, r18	; 0x10
     a6c:	39 8b       	std	Y+17, r19	; 0x11
     a6e:	4a 8b       	std	Y+18, r20	; 0x12
     a70:	5b 8b       	std	Y+19, r21	; 0x13
unsigned long int SMTick2_period = SMTick2_calc / GCD;
     a72:	62 e3       	ldi	r22, 0x32	; 50
     a74:	70 e0       	ldi	r23, 0x00	; 0
     a76:	80 e0       	ldi	r24, 0x00	; 0
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	2e 2d       	mov	r18, r14
     a7c:	3f 2d       	mov	r19, r15
     a7e:	40 2f       	mov	r20, r16
     a80:	51 2f       	mov	r21, r17
     a82:	6b d4       	rcall	.+2262   	; 0x135a <__udivmodsi4>
     a84:	29 01       	movw	r4, r18
     a86:	3a 01       	movw	r6, r20
unsigned long int SMTick3_period = SMTick3_calc / GCD;
     a88:	60 e9       	ldi	r22, 0x90	; 144
     a8a:	71 e0       	ldi	r23, 0x01	; 1
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	2e 2d       	mov	r18, r14
     a92:	3f 2d       	mov	r19, r15
     a94:	40 2f       	mov	r20, r16
     a96:	51 2f       	mov	r21, r17
     a98:	60 d4       	rcall	.+2240   	; 0x135a <__udivmodsi4>
     a9a:	49 01       	movw	r8, r18
     a9c:	5a 01       	movw	r10, r20
/*unsigned long int SMTick4_period = SMTick4_calc / GCD;*/

// Declare an array of tasks
static task task1, task2, task3;//, task4;
task *tasks[] = { &task1, &task2, &task3};//, &task4 };
     a9e:	86 e0       	ldi	r24, 0x06	; 6
     aa0:	e1 e2       	ldi	r30, 0x21	; 33
     aa2:	f1 e0       	ldi	r31, 0x01	; 1
     aa4:	de 01       	movw	r26, r28
     aa6:	11 96       	adiw	r26, 0x01	; 1
     aa8:	01 90       	ld	r0, Z+
     aaa:	0d 92       	st	X+, r0
     aac:	8a 95       	dec	r24
     aae:	e1 f7       	brne	.-8      	; 0xaa8 <main+0xc2>
const unsigned short numTasks = sizeof(tasks) / sizeof(task*);

// Task 1
task1.state = -1; // Task initial state.
     ab0:	ee ec       	ldi	r30, 0xCE	; 206
     ab2:	f1 e0       	ldi	r31, 0x01	; 1
     ab4:	dd 24       	eor	r13, r13
     ab6:	da 94       	dec	r13
     ab8:	d0 82       	st	Z, r13
task1.period = SMTick1_period; // Task Period.
     aba:	88 89       	ldd	r24, Y+16	; 0x10
     abc:	99 89       	ldd	r25, Y+17	; 0x11
     abe:	aa 89       	ldd	r26, Y+18	; 0x12
     ac0:	bb 89       	ldd	r27, Y+19	; 0x13
     ac2:	81 83       	std	Z+1, r24	; 0x01
     ac4:	92 83       	std	Z+2, r25	; 0x02
     ac6:	a3 83       	std	Z+3, r26	; 0x03
     ac8:	b4 83       	std	Z+4, r27	; 0x04
task1.elapsedTime = SMTick1_period; // Task current elapsed time.
     aca:	85 83       	std	Z+5, r24	; 0x05
     acc:	96 83       	std	Z+6, r25	; 0x06
     ace:	a7 83       	std	Z+7, r26	; 0x07
     ad0:	b0 87       	std	Z+8, r27	; 0x08
task1.TickFct = &SMTick1; // Function pointer for the tick.
     ad2:	88 e3       	ldi	r24, 0x38	; 56
     ad4:	94 e0       	ldi	r25, 0x04	; 4
     ad6:	92 87       	std	Z+10, r25	; 0x0a

//Task 2
LCD_init();
     ad8:	81 87       	std	Z+9, r24	; 0x09
     ada:	bc db       	rcall	.-2184   	; 0x254 <LCD_init>
task2.state = -1; // Task initial state.
     adc:	e3 ec       	ldi	r30, 0xC3	; 195
     ade:	f1 e0       	ldi	r31, 0x01	; 1
     ae0:	d0 82       	st	Z, r13
task2.period = SMTick2_period; // Task Period.
     ae2:	41 82       	std	Z+1, r4	; 0x01
     ae4:	52 82       	std	Z+2, r5	; 0x02
     ae6:	63 82       	std	Z+3, r6	; 0x03
     ae8:	74 82       	std	Z+4, r7	; 0x04
task2.elapsedTime = SMTick2_period; // Task current elapsed time.
     aea:	45 82       	std	Z+5, r4	; 0x05
     aec:	56 82       	std	Z+6, r5	; 0x06
     aee:	67 82       	std	Z+7, r6	; 0x07
     af0:	70 86       	std	Z+8, r7	; 0x08
task2.TickFct = &SMTick2; // Function pointer for the tick.
     af2:	8e e7       	ldi	r24, 0x7E	; 126
     af4:	92 e0       	ldi	r25, 0x02	; 2
     af6:	92 87       	std	Z+10, r25	; 0x0a
     af8:	81 87       	std	Z+9, r24	; 0x09

// Task 3
task3.state = -1;//Task initial state.
     afa:	e8 eb       	ldi	r30, 0xB8	; 184
     afc:	f1 e0       	ldi	r31, 0x01	; 1
     afe:	d0 82       	st	Z, r13
task3.period = SMTick3_period;//Task Period.
     b00:	81 82       	std	Z+1, r8	; 0x01
     b02:	92 82       	std	Z+2, r9	; 0x02
     b04:	a3 82       	std	Z+3, r10	; 0x03
     b06:	b4 82       	std	Z+4, r11	; 0x04
task3.elapsedTime = SMTick3_period; // Task current elasped time.
     b08:	85 82       	std	Z+5, r8	; 0x05
     b0a:	96 82       	std	Z+6, r9	; 0x06
     b0c:	a7 82       	std	Z+7, r10	; 0x07
     b0e:	b0 86       	std	Z+8, r11	; 0x08
task3.TickFct = &SMTick3; // Function pointer for the tick.
     b10:	8d e5       	ldi	r24, 0x5D	; 93
     b12:	91 e0       	ldi	r25, 0x01	; 1
     b14:	92 87       	std	Z+10, r25	; 0x0a
// task4.period = SMTick3_period;//Task Period.
// task4.elapsedTime = SMTick4_period; // Task current elasped time.
/*task4.TickFct = &SMTick4; // Function pointer for the tick.*/

// Set the timer and turn it on
TimerSet(GCD);
     b16:	81 87       	std	Z+9, r24	; 0x09
     b18:	6e 2d       	mov	r22, r14
     b1a:	7f 2d       	mov	r23, r15
     b1c:	80 2f       	mov	r24, r16
     b1e:	91 2f       	mov	r25, r17
TimerOn();
     b20:	10 dc       	rcall	.-2016   	; 0x342 <TimerSet>
     b22:	20 dc       	rcall	.-1984   	; 0x364 <TimerOn>
char MSG[] = "Message:";
     b24:	89 e0       	ldi	r24, 0x09	; 9
     b26:	ea e5       	ldi	r30, 0x5A	; 90
     b28:	f1 e0       	ldi	r31, 0x01	; 1
     b2a:	de 01       	movw	r26, r28
     b2c:	17 96       	adiw	r26, 0x07	; 7
     b2e:	01 90       	ld	r0, Z+
     b30:	0d 92       	st	X+, r0
     b32:	8a 95       	dec	r24
//const char length_msg = strlen(MSG);
//char test[] = "testing";
//strcat(MSG, buffer);
//strcat(MSG, test);
LCD_DisplayString(1, MSG);
     b34:	e1 f7       	brne	.-8      	; 0xb2e <main+0x148>
     b36:	be 01       	movw	r22, r28
     b38:	69 5f       	subi	r22, 0xF9	; 249
     b3a:	7f 4f       	sbci	r23, 0xFF	; 255
     b3c:	81 e0       	ldi	r24, 0x01	; 1
     b3e:	a2 db       	rcall	.-2236   	; 0x284 <LCD_DisplayString>
     b40:	7e 01       	movw	r14, r28
     b42:	97 e0       	ldi	r25, 0x07	; 7
     b44:	e9 0e       	add	r14, r25
     b46:	f1 1c       	adc	r15, r1
     b48:	de 01       	movw	r26, r28
     b4a:	11 96       	adiw	r26, 0x01	; 1
     b4c:	5d 01       	movw	r10, r26
{
	// Scheduler code
	for ( i = 0; i < numTasks; i++ )
	{
		// Task is ready to tick
		if ( tasks[i]->elapsedTime == tasks[i]->period )
     b4e:	f5 01       	movw	r30, r10
     b50:	01 91       	ld	r16, Z+
     b52:	11 91       	ld	r17, Z+
     b54:	5f 01       	movw	r10, r30
     b56:	d8 01       	movw	r26, r16
     b58:	15 96       	adiw	r26, 0x05	; 5
     b5a:	4d 91       	ld	r20, X+
     b5c:	5d 91       	ld	r21, X+
     b5e:	6d 91       	ld	r22, X+
     b60:	7c 91       	ld	r23, X
     b62:	18 97       	sbiw	r26, 0x08	; 8
     b64:	11 96       	adiw	r26, 0x01	; 1
     b66:	8d 91       	ld	r24, X+
     b68:	9d 91       	ld	r25, X+
     b6a:	0d 90       	ld	r0, X+
     b6c:	bc 91       	ld	r27, X
     b6e:	a0 2d       	mov	r26, r0
     b70:	48 17       	cp	r20, r24
     b72:	59 07       	cpc	r21, r25
     b74:	6a 07       	cpc	r22, r26
     b76:	7b 07       	cpc	r23, r27
     b78:	81 f4       	brne	.+32     	; 0xb9a <main+0x1b4>
		{
			// Setting next state for task
			tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
     b7a:	f8 01       	movw	r30, r16
     b7c:	80 81       	ld	r24, Z
     b7e:	01 84       	ldd	r0, Z+9	; 0x09
     b80:	f2 85       	ldd	r31, Z+10	; 0x0a
     b82:	e0 2d       	mov	r30, r0
     b84:	08 2e       	mov	r0, r24
     b86:	00 0c       	add	r0, r0
     b88:	99 0b       	sbc	r25, r25
     b8a:	09 95       	icall
     b8c:	d8 01       	movw	r26, r16
     b8e:	8c 93       	st	X, r24
			// Reset the elapsed time for next tick.
			tasks[i]->elapsedTime = 0;
     b90:	f8 01       	movw	r30, r16
     b92:	15 82       	std	Z+5, r1	; 0x05
     b94:	16 82       	std	Z+6, r1	; 0x06
     b96:	17 82       	std	Z+7, r1	; 0x07
     b98:	10 86       	std	Z+8, r1	; 0x08
		}
		tasks[i]->elapsedTime += 1;
     b9a:	f8 01       	movw	r30, r16
     b9c:	85 81       	ldd	r24, Z+5	; 0x05
     b9e:	96 81       	ldd	r25, Z+6	; 0x06
     ba0:	a7 81       	ldd	r26, Z+7	; 0x07
     ba2:	b0 85       	ldd	r27, Z+8	; 0x08
     ba4:	01 96       	adiw	r24, 0x01	; 1
     ba6:	a1 1d       	adc	r26, r1
     ba8:	b1 1d       	adc	r27, r1
     baa:	85 83       	std	Z+5, r24	; 0x05
     bac:	96 83       	std	Z+6, r25	; 0x06
     bae:	a7 83       	std	Z+7, r26	; 0x07
     bb0:	b0 87       	std	Z+8, r27	; 0x08
//LCD_DisplayString(17,"testing:");
unsigned short i; // Scheduler for-loop iterator
while(1)
{
	// Scheduler code
	for ( i = 0; i < numTasks; i++ )
     bb2:	ae 14       	cp	r10, r14
     bb4:	bf 04       	cpc	r11, r15
     bb6:	59 f6       	brne	.-106    	; 0xb4e <main+0x168>
			// Reset the elapsed time for next tick.
			tasks[i]->elapsedTime = 0;
		}
		tasks[i]->elapsedTime += 1;
	}
	while(!TimerFlag);
     bb8:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <TimerFlag>
     bbc:	88 23       	and	r24, r24
     bbe:	e1 f3       	breq	.-8      	; 0xbb8 <main+0x1d2>
	TimerFlag = 0;
     bc0:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <TimerFlag>
}
     bc4:	c1 cf       	rjmp	.-126    	; 0xb48 <main+0x162>

00000bc6 <__subsf3>:
     bc6:	50 58       	subi	r21, 0x80	; 128

00000bc8 <__addsf3>:
     bc8:	bb 27       	eor	r27, r27
     bca:	aa 27       	eor	r26, r26
     bcc:	0e d0       	rcall	.+28     	; 0xbea <__addsf3x>
     bce:	69 c1       	rjmp	.+722    	; 0xea2 <__fp_round>
     bd0:	5a d1       	rcall	.+692    	; 0xe86 <__fp_pscA>
     bd2:	30 f0       	brcs	.+12     	; 0xbe0 <__addsf3+0x18>
     bd4:	5f d1       	rcall	.+702    	; 0xe94 <__fp_pscB>
     bd6:	20 f0       	brcs	.+8      	; 0xbe0 <__addsf3+0x18>
     bd8:	31 f4       	brne	.+12     	; 0xbe6 <__addsf3+0x1e>
     bda:	9f 3f       	cpi	r25, 0xFF	; 255
     bdc:	11 f4       	brne	.+4      	; 0xbe2 <__addsf3+0x1a>
     bde:	1e f4       	brtc	.+6      	; 0xbe6 <__addsf3+0x1e>
     be0:	4f c1       	rjmp	.+670    	; 0xe80 <__fp_nan>
     be2:	0e f4       	brtc	.+2      	; 0xbe6 <__addsf3+0x1e>
     be4:	e0 95       	com	r30
     be6:	e7 fb       	bst	r30, 7
     be8:	37 c1       	rjmp	.+622    	; 0xe58 <__fp_inf>

00000bea <__addsf3x>:
     bea:	e9 2f       	mov	r30, r25
     bec:	6b d1       	rcall	.+726    	; 0xec4 <__fp_split3>
     bee:	80 f3       	brcs	.-32     	; 0xbd0 <__addsf3+0x8>
     bf0:	ba 17       	cp	r27, r26
     bf2:	62 07       	cpc	r22, r18
     bf4:	73 07       	cpc	r23, r19
     bf6:	84 07       	cpc	r24, r20
     bf8:	95 07       	cpc	r25, r21
     bfa:	18 f0       	brcs	.+6      	; 0xc02 <__addsf3x+0x18>
     bfc:	71 f4       	brne	.+28     	; 0xc1a <__addsf3x+0x30>
     bfe:	9e f5       	brtc	.+102    	; 0xc66 <__addsf3x+0x7c>
     c00:	83 c1       	rjmp	.+774    	; 0xf08 <__fp_zero>
     c02:	0e f4       	brtc	.+2      	; 0xc06 <__addsf3x+0x1c>
     c04:	e0 95       	com	r30
     c06:	0b 2e       	mov	r0, r27
     c08:	ba 2f       	mov	r27, r26
     c0a:	a0 2d       	mov	r26, r0
     c0c:	0b 01       	movw	r0, r22
     c0e:	b9 01       	movw	r22, r18
     c10:	90 01       	movw	r18, r0
     c12:	0c 01       	movw	r0, r24
     c14:	ca 01       	movw	r24, r20
     c16:	a0 01       	movw	r20, r0
     c18:	11 24       	eor	r1, r1
     c1a:	ff 27       	eor	r31, r31
     c1c:	59 1b       	sub	r21, r25
     c1e:	99 f0       	breq	.+38     	; 0xc46 <__addsf3x+0x5c>
     c20:	59 3f       	cpi	r21, 0xF9	; 249
     c22:	50 f4       	brcc	.+20     	; 0xc38 <__addsf3x+0x4e>
     c24:	50 3e       	cpi	r21, 0xE0	; 224
     c26:	68 f1       	brcs	.+90     	; 0xc82 <__addsf3x+0x98>
     c28:	1a 16       	cp	r1, r26
     c2a:	f0 40       	sbci	r31, 0x00	; 0
     c2c:	a2 2f       	mov	r26, r18
     c2e:	23 2f       	mov	r18, r19
     c30:	34 2f       	mov	r19, r20
     c32:	44 27       	eor	r20, r20
     c34:	58 5f       	subi	r21, 0xF8	; 248
     c36:	f3 cf       	rjmp	.-26     	; 0xc1e <__addsf3x+0x34>
     c38:	46 95       	lsr	r20
     c3a:	37 95       	ror	r19
     c3c:	27 95       	ror	r18
     c3e:	a7 95       	ror	r26
     c40:	f0 40       	sbci	r31, 0x00	; 0
     c42:	53 95       	inc	r21
     c44:	c9 f7       	brne	.-14     	; 0xc38 <__addsf3x+0x4e>
     c46:	7e f4       	brtc	.+30     	; 0xc66 <__addsf3x+0x7c>
     c48:	1f 16       	cp	r1, r31
     c4a:	ba 0b       	sbc	r27, r26
     c4c:	62 0b       	sbc	r22, r18
     c4e:	73 0b       	sbc	r23, r19
     c50:	84 0b       	sbc	r24, r20
     c52:	ba f0       	brmi	.+46     	; 0xc82 <__addsf3x+0x98>
     c54:	91 50       	subi	r25, 0x01	; 1
     c56:	a1 f0       	breq	.+40     	; 0xc80 <__addsf3x+0x96>
     c58:	ff 0f       	add	r31, r31
     c5a:	bb 1f       	adc	r27, r27
     c5c:	66 1f       	adc	r22, r22
     c5e:	77 1f       	adc	r23, r23
     c60:	88 1f       	adc	r24, r24
     c62:	c2 f7       	brpl	.-16     	; 0xc54 <__addsf3x+0x6a>
     c64:	0e c0       	rjmp	.+28     	; 0xc82 <__addsf3x+0x98>
     c66:	ba 0f       	add	r27, r26
     c68:	62 1f       	adc	r22, r18
     c6a:	73 1f       	adc	r23, r19
     c6c:	84 1f       	adc	r24, r20
     c6e:	48 f4       	brcc	.+18     	; 0xc82 <__addsf3x+0x98>
     c70:	87 95       	ror	r24
     c72:	77 95       	ror	r23
     c74:	67 95       	ror	r22
     c76:	b7 95       	ror	r27
     c78:	f7 95       	ror	r31
     c7a:	9e 3f       	cpi	r25, 0xFE	; 254
     c7c:	08 f0       	brcs	.+2      	; 0xc80 <__addsf3x+0x96>
     c7e:	b3 cf       	rjmp	.-154    	; 0xbe6 <__addsf3+0x1e>
     c80:	93 95       	inc	r25
     c82:	88 0f       	add	r24, r24
     c84:	08 f0       	brcs	.+2      	; 0xc88 <__addsf3x+0x9e>
     c86:	99 27       	eor	r25, r25
     c88:	ee 0f       	add	r30, r30
     c8a:	97 95       	ror	r25
     c8c:	87 95       	ror	r24
     c8e:	08 95       	ret

00000c90 <__cmpsf2>:
     c90:	bf d0       	rcall	.+382    	; 0xe10 <__fp_cmp>
     c92:	08 f4       	brcc	.+2      	; 0xc96 <__cmpsf2+0x6>
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	08 95       	ret

00000c98 <__fixsfsi>:
     c98:	04 d0       	rcall	.+8      	; 0xca2 <__fixunssfsi>
     c9a:	68 94       	set
     c9c:	b1 11       	cpse	r27, r1
     c9e:	35 c1       	rjmp	.+618    	; 0xf0a <__fp_szero>
     ca0:	08 95       	ret

00000ca2 <__fixunssfsi>:
     ca2:	18 d1       	rcall	.+560    	; 0xed4 <__fp_splitA>
     ca4:	88 f0       	brcs	.+34     	; 0xcc8 <__fixunssfsi+0x26>
     ca6:	9f 57       	subi	r25, 0x7F	; 127
     ca8:	90 f0       	brcs	.+36     	; 0xcce <__fixunssfsi+0x2c>
     caa:	b9 2f       	mov	r27, r25
     cac:	99 27       	eor	r25, r25
     cae:	b7 51       	subi	r27, 0x17	; 23
     cb0:	a0 f0       	brcs	.+40     	; 0xcda <__fixunssfsi+0x38>
     cb2:	d1 f0       	breq	.+52     	; 0xce8 <__fixunssfsi+0x46>
     cb4:	66 0f       	add	r22, r22
     cb6:	77 1f       	adc	r23, r23
     cb8:	88 1f       	adc	r24, r24
     cba:	99 1f       	adc	r25, r25
     cbc:	1a f0       	brmi	.+6      	; 0xcc4 <__fixunssfsi+0x22>
     cbe:	ba 95       	dec	r27
     cc0:	c9 f7       	brne	.-14     	; 0xcb4 <__fixunssfsi+0x12>
     cc2:	12 c0       	rjmp	.+36     	; 0xce8 <__fixunssfsi+0x46>
     cc4:	b1 30       	cpi	r27, 0x01	; 1
     cc6:	81 f0       	breq	.+32     	; 0xce8 <__fixunssfsi+0x46>
     cc8:	1f d1       	rcall	.+574    	; 0xf08 <__fp_zero>
     cca:	b1 e0       	ldi	r27, 0x01	; 1
     ccc:	08 95       	ret
     cce:	1c c1       	rjmp	.+568    	; 0xf08 <__fp_zero>
     cd0:	67 2f       	mov	r22, r23
     cd2:	78 2f       	mov	r23, r24
     cd4:	88 27       	eor	r24, r24
     cd6:	b8 5f       	subi	r27, 0xF8	; 248
     cd8:	39 f0       	breq	.+14     	; 0xce8 <__fixunssfsi+0x46>
     cda:	b9 3f       	cpi	r27, 0xF9	; 249
     cdc:	cc f3       	brlt	.-14     	; 0xcd0 <__fixunssfsi+0x2e>
     cde:	86 95       	lsr	r24
     ce0:	77 95       	ror	r23
     ce2:	67 95       	ror	r22
     ce4:	b3 95       	inc	r27
     ce6:	d9 f7       	brne	.-10     	; 0xcde <__fixunssfsi+0x3c>
     ce8:	3e f4       	brtc	.+14     	; 0xcf8 <__fixunssfsi+0x56>
     cea:	90 95       	com	r25
     cec:	80 95       	com	r24
     cee:	70 95       	com	r23
     cf0:	61 95       	neg	r22
     cf2:	7f 4f       	sbci	r23, 0xFF	; 255
     cf4:	8f 4f       	sbci	r24, 0xFF	; 255
     cf6:	9f 4f       	sbci	r25, 0xFF	; 255
     cf8:	08 95       	ret

00000cfa <__floatunsisf>:
     cfa:	e8 94       	clt
     cfc:	09 c0       	rjmp	.+18     	; 0xd10 <__floatsisf+0x12>

00000cfe <__floatsisf>:
     cfe:	97 fb       	bst	r25, 7
     d00:	3e f4       	brtc	.+14     	; 0xd10 <__floatsisf+0x12>
     d02:	90 95       	com	r25
     d04:	80 95       	com	r24
     d06:	70 95       	com	r23
     d08:	61 95       	neg	r22
     d0a:	7f 4f       	sbci	r23, 0xFF	; 255
     d0c:	8f 4f       	sbci	r24, 0xFF	; 255
     d0e:	9f 4f       	sbci	r25, 0xFF	; 255
     d10:	99 23       	and	r25, r25
     d12:	a9 f0       	breq	.+42     	; 0xd3e <__floatsisf+0x40>
     d14:	f9 2f       	mov	r31, r25
     d16:	96 e9       	ldi	r25, 0x96	; 150
     d18:	bb 27       	eor	r27, r27
     d1a:	93 95       	inc	r25
     d1c:	f6 95       	lsr	r31
     d1e:	87 95       	ror	r24
     d20:	77 95       	ror	r23
     d22:	67 95       	ror	r22
     d24:	b7 95       	ror	r27
     d26:	f1 11       	cpse	r31, r1
     d28:	f8 cf       	rjmp	.-16     	; 0xd1a <__floatsisf+0x1c>
     d2a:	fa f4       	brpl	.+62     	; 0xd6a <__floatsisf+0x6c>
     d2c:	bb 0f       	add	r27, r27
     d2e:	11 f4       	brne	.+4      	; 0xd34 <__floatsisf+0x36>
     d30:	60 ff       	sbrs	r22, 0
     d32:	1b c0       	rjmp	.+54     	; 0xd6a <__floatsisf+0x6c>
     d34:	6f 5f       	subi	r22, 0xFF	; 255
     d36:	7f 4f       	sbci	r23, 0xFF	; 255
     d38:	8f 4f       	sbci	r24, 0xFF	; 255
     d3a:	9f 4f       	sbci	r25, 0xFF	; 255
     d3c:	16 c0       	rjmp	.+44     	; 0xd6a <__floatsisf+0x6c>
     d3e:	88 23       	and	r24, r24
     d40:	11 f0       	breq	.+4      	; 0xd46 <__floatsisf+0x48>
     d42:	96 e9       	ldi	r25, 0x96	; 150
     d44:	11 c0       	rjmp	.+34     	; 0xd68 <__floatsisf+0x6a>
     d46:	77 23       	and	r23, r23
     d48:	21 f0       	breq	.+8      	; 0xd52 <__floatsisf+0x54>
     d4a:	9e e8       	ldi	r25, 0x8E	; 142
     d4c:	87 2f       	mov	r24, r23
     d4e:	76 2f       	mov	r23, r22
     d50:	05 c0       	rjmp	.+10     	; 0xd5c <__floatsisf+0x5e>
     d52:	66 23       	and	r22, r22
     d54:	71 f0       	breq	.+28     	; 0xd72 <__floatsisf+0x74>
     d56:	96 e8       	ldi	r25, 0x86	; 134
     d58:	86 2f       	mov	r24, r22
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	60 e0       	ldi	r22, 0x00	; 0
     d5e:	2a f0       	brmi	.+10     	; 0xd6a <__floatsisf+0x6c>
     d60:	9a 95       	dec	r25
     d62:	66 0f       	add	r22, r22
     d64:	77 1f       	adc	r23, r23
     d66:	88 1f       	adc	r24, r24
     d68:	da f7       	brpl	.-10     	; 0xd60 <__floatsisf+0x62>
     d6a:	88 0f       	add	r24, r24
     d6c:	96 95       	lsr	r25
     d6e:	87 95       	ror	r24
     d70:	97 f9       	bld	r25, 7
     d72:	08 95       	ret
     d74:	88 d0       	rcall	.+272    	; 0xe86 <__fp_pscA>
     d76:	18 f0       	brcs	.+6      	; 0xd7e <__floatsisf+0x80>
     d78:	11 f0       	breq	.+4      	; 0xd7e <__floatsisf+0x80>
     d7a:	8c d0       	rcall	.+280    	; 0xe94 <__fp_pscB>
     d7c:	38 f4       	brcc	.+14     	; 0xd8c <fmod+0xa>
     d7e:	80 c0       	rjmp	.+256    	; 0xe80 <__fp_nan>
     d80:	c4 c0       	rjmp	.+392    	; 0xf0a <__fp_szero>

00000d82 <fmod>:
     d82:	e9 2f       	mov	r30, r25
     d84:	9f d0       	rcall	.+318    	; 0xec4 <__fp_split3>
     d86:	b0 f3       	brcs	.-20     	; 0xd74 <__floatsisf+0x76>
     d88:	55 23       	and	r21, r21
     d8a:	c9 f3       	breq	.-14     	; 0xd7e <__floatsisf+0x80>
     d8c:	e7 fb       	bst	r30, 7
     d8e:	62 17       	cp	r22, r18
     d90:	73 07       	cpc	r23, r19
     d92:	84 07       	cpc	r24, r20
     d94:	95 07       	cpc	r25, r21
     d96:	a8 f1       	brcs	.+106    	; 0xe02 <fmod+0x80>
     d98:	99 f3       	breq	.-26     	; 0xd80 <__floatsisf+0x82>
     d9a:	e9 2f       	mov	r30, r25
     d9c:	ff 27       	eor	r31, r31
     d9e:	88 23       	and	r24, r24
     da0:	2a f0       	brmi	.+10     	; 0xdac <fmod+0x2a>
     da2:	31 97       	sbiw	r30, 0x01	; 1
     da4:	66 0f       	add	r22, r22
     da6:	77 1f       	adc	r23, r23
     da8:	88 1f       	adc	r24, r24
     daa:	da f7       	brpl	.-10     	; 0xda2 <fmod+0x20>
     dac:	95 2f       	mov	r25, r21
     dae:	55 27       	eor	r21, r21
     db0:	44 23       	and	r20, r20
     db2:	32 f0       	brmi	.+12     	; 0xdc0 <fmod+0x3e>
     db4:	91 50       	subi	r25, 0x01	; 1
     db6:	50 40       	sbci	r21, 0x00	; 0
     db8:	22 0f       	add	r18, r18
     dba:	33 1f       	adc	r19, r19
     dbc:	44 1f       	adc	r20, r20
     dbe:	d2 f7       	brpl	.-12     	; 0xdb4 <fmod+0x32>
     dc0:	bb 27       	eor	r27, r27
     dc2:	e9 1b       	sub	r30, r25
     dc4:	f5 0b       	sbc	r31, r21
     dc6:	62 1b       	sub	r22, r18
     dc8:	73 0b       	sbc	r23, r19
     dca:	84 0b       	sbc	r24, r20
     dcc:	b1 09       	sbc	r27, r1
     dce:	c1 f2       	breq	.-80     	; 0xd80 <__floatsisf+0x82>
     dd0:	22 f4       	brpl	.+8      	; 0xdda <fmod+0x58>
     dd2:	62 0f       	add	r22, r18
     dd4:	73 1f       	adc	r23, r19
     dd6:	84 1f       	adc	r24, r20
     dd8:	b1 1d       	adc	r27, r1
     dda:	31 97       	sbiw	r30, 0x01	; 1
     ddc:	2a f0       	brmi	.+10     	; 0xde8 <fmod+0x66>
     dde:	66 0f       	add	r22, r22
     de0:	77 1f       	adc	r23, r23
     de2:	88 1f       	adc	r24, r24
     de4:	bb 1f       	adc	r27, r27
     de6:	ef cf       	rjmp	.-34     	; 0xdc6 <fmod+0x44>
     de8:	91 50       	subi	r25, 0x01	; 1
     dea:	50 40       	sbci	r21, 0x00	; 0
     dec:	5a f0       	brmi	.+22     	; 0xe04 <fmod+0x82>
     dee:	41 f0       	breq	.+16     	; 0xe00 <fmod+0x7e>
     df0:	88 23       	and	r24, r24
     df2:	32 f0       	brmi	.+12     	; 0xe00 <fmod+0x7e>
     df4:	66 0f       	add	r22, r22
     df6:	77 1f       	adc	r23, r23
     df8:	88 1f       	adc	r24, r24
     dfa:	91 50       	subi	r25, 0x01	; 1
     dfc:	50 40       	sbci	r21, 0x00	; 0
     dfe:	c1 f7       	brne	.-16     	; 0xdf0 <fmod+0x6e>
     e00:	93 95       	inc	r25
     e02:	30 c0       	rjmp	.+96     	; 0xe64 <__fp_mpack>
     e04:	86 95       	lsr	r24
     e06:	77 95       	ror	r23
     e08:	67 95       	ror	r22
     e0a:	9f 5f       	subi	r25, 0xFF	; 255
     e0c:	d9 f7       	brne	.-10     	; 0xe04 <fmod+0x82>
     e0e:	f8 cf       	rjmp	.-16     	; 0xe00 <fmod+0x7e>

00000e10 <__fp_cmp>:
     e10:	99 0f       	add	r25, r25
     e12:	00 08       	sbc	r0, r0
     e14:	55 0f       	add	r21, r21
     e16:	aa 0b       	sbc	r26, r26
     e18:	e0 e8       	ldi	r30, 0x80	; 128
     e1a:	fe ef       	ldi	r31, 0xFE	; 254
     e1c:	16 16       	cp	r1, r22
     e1e:	17 06       	cpc	r1, r23
     e20:	e8 07       	cpc	r30, r24
     e22:	f9 07       	cpc	r31, r25
     e24:	c0 f0       	brcs	.+48     	; 0xe56 <__fp_cmp+0x46>
     e26:	12 16       	cp	r1, r18
     e28:	13 06       	cpc	r1, r19
     e2a:	e4 07       	cpc	r30, r20
     e2c:	f5 07       	cpc	r31, r21
     e2e:	98 f0       	brcs	.+38     	; 0xe56 <__fp_cmp+0x46>
     e30:	62 1b       	sub	r22, r18
     e32:	73 0b       	sbc	r23, r19
     e34:	84 0b       	sbc	r24, r20
     e36:	95 0b       	sbc	r25, r21
     e38:	39 f4       	brne	.+14     	; 0xe48 <__fp_cmp+0x38>
     e3a:	0a 26       	eor	r0, r26
     e3c:	61 f0       	breq	.+24     	; 0xe56 <__fp_cmp+0x46>
     e3e:	23 2b       	or	r18, r19
     e40:	24 2b       	or	r18, r20
     e42:	25 2b       	or	r18, r21
     e44:	21 f4       	brne	.+8      	; 0xe4e <__fp_cmp+0x3e>
     e46:	08 95       	ret
     e48:	0a 26       	eor	r0, r26
     e4a:	09 f4       	brne	.+2      	; 0xe4e <__fp_cmp+0x3e>
     e4c:	a1 40       	sbci	r26, 0x01	; 1
     e4e:	a6 95       	lsr	r26
     e50:	8f ef       	ldi	r24, 0xFF	; 255
     e52:	81 1d       	adc	r24, r1
     e54:	81 1d       	adc	r24, r1
     e56:	08 95       	ret

00000e58 <__fp_inf>:
     e58:	97 f9       	bld	r25, 7
     e5a:	9f 67       	ori	r25, 0x7F	; 127
     e5c:	80 e8       	ldi	r24, 0x80	; 128
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	60 e0       	ldi	r22, 0x00	; 0
     e62:	08 95       	ret

00000e64 <__fp_mpack>:
     e64:	9f 3f       	cpi	r25, 0xFF	; 255
     e66:	31 f0       	breq	.+12     	; 0xe74 <__fp_mpack_finite+0xc>

00000e68 <__fp_mpack_finite>:
     e68:	91 50       	subi	r25, 0x01	; 1
     e6a:	20 f4       	brcc	.+8      	; 0xe74 <__fp_mpack_finite+0xc>
     e6c:	87 95       	ror	r24
     e6e:	77 95       	ror	r23
     e70:	67 95       	ror	r22
     e72:	b7 95       	ror	r27
     e74:	88 0f       	add	r24, r24
     e76:	91 1d       	adc	r25, r1
     e78:	96 95       	lsr	r25
     e7a:	87 95       	ror	r24
     e7c:	97 f9       	bld	r25, 7
     e7e:	08 95       	ret

00000e80 <__fp_nan>:
     e80:	9f ef       	ldi	r25, 0xFF	; 255
     e82:	80 ec       	ldi	r24, 0xC0	; 192
     e84:	08 95       	ret

00000e86 <__fp_pscA>:
     e86:	00 24       	eor	r0, r0
     e88:	0a 94       	dec	r0
     e8a:	16 16       	cp	r1, r22
     e8c:	17 06       	cpc	r1, r23
     e8e:	18 06       	cpc	r1, r24
     e90:	09 06       	cpc	r0, r25
     e92:	08 95       	ret

00000e94 <__fp_pscB>:
     e94:	00 24       	eor	r0, r0
     e96:	0a 94       	dec	r0
     e98:	12 16       	cp	r1, r18
     e9a:	13 06       	cpc	r1, r19
     e9c:	14 06       	cpc	r1, r20
     e9e:	05 06       	cpc	r0, r21
     ea0:	08 95       	ret

00000ea2 <__fp_round>:
     ea2:	09 2e       	mov	r0, r25
     ea4:	03 94       	inc	r0
     ea6:	00 0c       	add	r0, r0
     ea8:	11 f4       	brne	.+4      	; 0xeae <__fp_round+0xc>
     eaa:	88 23       	and	r24, r24
     eac:	52 f0       	brmi	.+20     	; 0xec2 <__fp_round+0x20>
     eae:	bb 0f       	add	r27, r27
     eb0:	40 f4       	brcc	.+16     	; 0xec2 <__fp_round+0x20>
     eb2:	bf 2b       	or	r27, r31
     eb4:	11 f4       	brne	.+4      	; 0xeba <__fp_round+0x18>
     eb6:	60 ff       	sbrs	r22, 0
     eb8:	04 c0       	rjmp	.+8      	; 0xec2 <__fp_round+0x20>
     eba:	6f 5f       	subi	r22, 0xFF	; 255
     ebc:	7f 4f       	sbci	r23, 0xFF	; 255
     ebe:	8f 4f       	sbci	r24, 0xFF	; 255
     ec0:	9f 4f       	sbci	r25, 0xFF	; 255
     ec2:	08 95       	ret

00000ec4 <__fp_split3>:
     ec4:	57 fd       	sbrc	r21, 7
     ec6:	90 58       	subi	r25, 0x80	; 128
     ec8:	44 0f       	add	r20, r20
     eca:	55 1f       	adc	r21, r21
     ecc:	59 f0       	breq	.+22     	; 0xee4 <__fp_splitA+0x10>
     ece:	5f 3f       	cpi	r21, 0xFF	; 255
     ed0:	71 f0       	breq	.+28     	; 0xeee <__fp_splitA+0x1a>
     ed2:	47 95       	ror	r20

00000ed4 <__fp_splitA>:
     ed4:	88 0f       	add	r24, r24
     ed6:	97 fb       	bst	r25, 7
     ed8:	99 1f       	adc	r25, r25
     eda:	61 f0       	breq	.+24     	; 0xef4 <__fp_splitA+0x20>
     edc:	9f 3f       	cpi	r25, 0xFF	; 255
     ede:	79 f0       	breq	.+30     	; 0xefe <__fp_splitA+0x2a>
     ee0:	87 95       	ror	r24
     ee2:	08 95       	ret
     ee4:	12 16       	cp	r1, r18
     ee6:	13 06       	cpc	r1, r19
     ee8:	14 06       	cpc	r1, r20
     eea:	55 1f       	adc	r21, r21
     eec:	f2 cf       	rjmp	.-28     	; 0xed2 <__fp_split3+0xe>
     eee:	46 95       	lsr	r20
     ef0:	f1 df       	rcall	.-30     	; 0xed4 <__fp_splitA>
     ef2:	08 c0       	rjmp	.+16     	; 0xf04 <__fp_splitA+0x30>
     ef4:	16 16       	cp	r1, r22
     ef6:	17 06       	cpc	r1, r23
     ef8:	18 06       	cpc	r1, r24
     efa:	99 1f       	adc	r25, r25
     efc:	f1 cf       	rjmp	.-30     	; 0xee0 <__fp_splitA+0xc>
     efe:	86 95       	lsr	r24
     f00:	71 05       	cpc	r23, r1
     f02:	61 05       	cpc	r22, r1
     f04:	08 94       	sec
     f06:	08 95       	ret

00000f08 <__fp_zero>:
     f08:	e8 94       	clt

00000f0a <__fp_szero>:
     f0a:	bb 27       	eor	r27, r27
     f0c:	66 27       	eor	r22, r22
     f0e:	77 27       	eor	r23, r23
     f10:	cb 01       	movw	r24, r22
     f12:	97 f9       	bld	r25, 7
     f14:	08 95       	ret

00000f16 <pow>:
     f16:	fa 01       	movw	r30, r20
     f18:	ee 0f       	add	r30, r30
     f1a:	ff 1f       	adc	r31, r31
     f1c:	30 96       	adiw	r30, 0x00	; 0
     f1e:	21 05       	cpc	r18, r1
     f20:	31 05       	cpc	r19, r1
     f22:	99 f1       	breq	.+102    	; 0xf8a <pow+0x74>
     f24:	61 15       	cp	r22, r1
     f26:	71 05       	cpc	r23, r1
     f28:	61 f4       	brne	.+24     	; 0xf42 <pow+0x2c>
     f2a:	80 38       	cpi	r24, 0x80	; 128
     f2c:	bf e3       	ldi	r27, 0x3F	; 63
     f2e:	9b 07       	cpc	r25, r27
     f30:	49 f1       	breq	.+82     	; 0xf84 <pow+0x6e>
     f32:	68 94       	set
     f34:	90 38       	cpi	r25, 0x80	; 128
     f36:	81 05       	cpc	r24, r1
     f38:	61 f0       	breq	.+24     	; 0xf52 <pow+0x3c>
     f3a:	80 38       	cpi	r24, 0x80	; 128
     f3c:	bf ef       	ldi	r27, 0xFF	; 255
     f3e:	9b 07       	cpc	r25, r27
     f40:	41 f0       	breq	.+16     	; 0xf52 <pow+0x3c>
     f42:	99 23       	and	r25, r25
     f44:	42 f5       	brpl	.+80     	; 0xf96 <pow+0x80>
     f46:	ff 3f       	cpi	r31, 0xFF	; 255
     f48:	e1 05       	cpc	r30, r1
     f4a:	31 05       	cpc	r19, r1
     f4c:	21 05       	cpc	r18, r1
     f4e:	11 f1       	breq	.+68     	; 0xf94 <pow+0x7e>
     f50:	e8 94       	clt
     f52:	08 94       	sec
     f54:	e7 95       	ror	r30
     f56:	d9 01       	movw	r26, r18
     f58:	aa 23       	and	r26, r26
     f5a:	29 f4       	brne	.+10     	; 0xf66 <pow+0x50>
     f5c:	ab 2f       	mov	r26, r27
     f5e:	be 2f       	mov	r27, r30
     f60:	f8 5f       	subi	r31, 0xF8	; 248
     f62:	d0 f3       	brcs	.-12     	; 0xf58 <pow+0x42>
     f64:	10 c0       	rjmp	.+32     	; 0xf86 <pow+0x70>
     f66:	ff 5f       	subi	r31, 0xFF	; 255
     f68:	70 f4       	brcc	.+28     	; 0xf86 <pow+0x70>
     f6a:	a6 95       	lsr	r26
     f6c:	e0 f7       	brcc	.-8      	; 0xf66 <pow+0x50>
     f6e:	f7 39       	cpi	r31, 0x97	; 151
     f70:	50 f0       	brcs	.+20     	; 0xf86 <pow+0x70>
     f72:	19 f0       	breq	.+6      	; 0xf7a <pow+0x64>
     f74:	ff 3a       	cpi	r31, 0xAF	; 175
     f76:	38 f4       	brcc	.+14     	; 0xf86 <pow+0x70>
     f78:	9f 77       	andi	r25, 0x7F	; 127
     f7a:	9f 93       	push	r25
     f7c:	0c d0       	rcall	.+24     	; 0xf96 <pow+0x80>
     f7e:	0f 90       	pop	r0
     f80:	07 fc       	sbrc	r0, 7
     f82:	90 58       	subi	r25, 0x80	; 128
     f84:	08 95       	ret
     f86:	3e f0       	brts	.+14     	; 0xf96 <pow+0x80>
     f88:	7b cf       	rjmp	.-266    	; 0xe80 <__fp_nan>
     f8a:	60 e0       	ldi	r22, 0x00	; 0
     f8c:	70 e0       	ldi	r23, 0x00	; 0
     f8e:	80 e8       	ldi	r24, 0x80	; 128
     f90:	9f e3       	ldi	r25, 0x3F	; 63
     f92:	08 95       	ret
     f94:	4f e7       	ldi	r20, 0x7F	; 127
     f96:	9f 77       	andi	r25, 0x7F	; 127
     f98:	5f 93       	push	r21
     f9a:	4f 93       	push	r20
     f9c:	3f 93       	push	r19
     f9e:	2f 93       	push	r18
     fa0:	9e d0       	rcall	.+316    	; 0x10de <log>
     fa2:	2f 91       	pop	r18
     fa4:	3f 91       	pop	r19
     fa6:	4f 91       	pop	r20
     fa8:	5f 91       	pop	r21
     faa:	0c d1       	rcall	.+536    	; 0x11c4 <__mulsf3>
     fac:	05 c0       	rjmp	.+10     	; 0xfb8 <exp>
     fae:	19 f4       	brne	.+6      	; 0xfb6 <pow+0xa0>
     fb0:	0e f0       	brts	.+2      	; 0xfb4 <pow+0x9e>
     fb2:	52 cf       	rjmp	.-348    	; 0xe58 <__fp_inf>
     fb4:	a9 cf       	rjmp	.-174    	; 0xf08 <__fp_zero>
     fb6:	64 cf       	rjmp	.-312    	; 0xe80 <__fp_nan>

00000fb8 <exp>:
     fb8:	8d df       	rcall	.-230    	; 0xed4 <__fp_splitA>
     fba:	c8 f3       	brcs	.-14     	; 0xfae <pow+0x98>
     fbc:	96 38       	cpi	r25, 0x86	; 134
     fbe:	c0 f7       	brcc	.-16     	; 0xfb0 <pow+0x9a>
     fc0:	07 f8       	bld	r0, 7
     fc2:	0f 92       	push	r0
     fc4:	e8 94       	clt
     fc6:	2b e3       	ldi	r18, 0x3B	; 59
     fc8:	3a ea       	ldi	r19, 0xAA	; 170
     fca:	48 eb       	ldi	r20, 0xB8	; 184
     fcc:	5f e7       	ldi	r21, 0x7F	; 127
     fce:	08 d1       	rcall	.+528    	; 0x11e0 <__mulsf3_pse>
     fd0:	0f 92       	push	r0
     fd2:	0f 92       	push	r0
     fd4:	0f 92       	push	r0
     fd6:	4d b7       	in	r20, 0x3d	; 61
     fd8:	5e b7       	in	r21, 0x3e	; 62
     fda:	0f 92       	push	r0
     fdc:	c0 d0       	rcall	.+384    	; 0x115e <modf>
     fde:	e6 e4       	ldi	r30, 0x46	; 70
     fe0:	f1 e0       	ldi	r31, 0x01	; 1
     fe2:	16 d0       	rcall	.+44     	; 0x1010 <__fp_powser>
     fe4:	4f 91       	pop	r20
     fe6:	5f 91       	pop	r21
     fe8:	ef 91       	pop	r30
     fea:	ff 91       	pop	r31
     fec:	e5 95       	asr	r30
     fee:	ee 1f       	adc	r30, r30
     ff0:	ff 1f       	adc	r31, r31
     ff2:	49 f0       	breq	.+18     	; 0x1006 <exp+0x4e>
     ff4:	fe 57       	subi	r31, 0x7E	; 126
     ff6:	e0 68       	ori	r30, 0x80	; 128
     ff8:	44 27       	eor	r20, r20
     ffa:	ee 0f       	add	r30, r30
     ffc:	44 1f       	adc	r20, r20
     ffe:	fa 95       	dec	r31
    1000:	e1 f7       	brne	.-8      	; 0xffa <exp+0x42>
    1002:	41 95       	neg	r20
    1004:	55 0b       	sbc	r21, r21
    1006:	32 d0       	rcall	.+100    	; 0x106c <ldexp>
    1008:	0f 90       	pop	r0
    100a:	07 fe       	sbrs	r0, 7
    100c:	26 c0       	rjmp	.+76     	; 0x105a <inverse>
    100e:	08 95       	ret

00001010 <__fp_powser>:
    1010:	df 93       	push	r29
    1012:	cf 93       	push	r28
    1014:	1f 93       	push	r17
    1016:	0f 93       	push	r16
    1018:	ff 92       	push	r15
    101a:	ef 92       	push	r14
    101c:	df 92       	push	r13
    101e:	7b 01       	movw	r14, r22
    1020:	8c 01       	movw	r16, r24
    1022:	68 94       	set
    1024:	05 c0       	rjmp	.+10     	; 0x1030 <__fp_powser+0x20>
    1026:	da 2e       	mov	r13, r26
    1028:	ef 01       	movw	r28, r30
    102a:	d8 d0       	rcall	.+432    	; 0x11dc <__mulsf3x>
    102c:	fe 01       	movw	r30, r28
    102e:	e8 94       	clt
    1030:	a5 91       	lpm	r26, Z+
    1032:	25 91       	lpm	r18, Z+
    1034:	35 91       	lpm	r19, Z+
    1036:	45 91       	lpm	r20, Z+
    1038:	55 91       	lpm	r21, Z+
    103a:	ae f3       	brts	.-22     	; 0x1026 <__fp_powser+0x16>
    103c:	ef 01       	movw	r28, r30
    103e:	d5 dd       	rcall	.-1110   	; 0xbea <__addsf3x>
    1040:	fe 01       	movw	r30, r28
    1042:	97 01       	movw	r18, r14
    1044:	a8 01       	movw	r20, r16
    1046:	da 94       	dec	r13
    1048:	79 f7       	brne	.-34     	; 0x1028 <__fp_powser+0x18>
    104a:	df 90       	pop	r13
    104c:	ef 90       	pop	r14
    104e:	ff 90       	pop	r15
    1050:	0f 91       	pop	r16
    1052:	1f 91       	pop	r17
    1054:	cf 91       	pop	r28
    1056:	df 91       	pop	r29
    1058:	08 95       	ret

0000105a <inverse>:
    105a:	9b 01       	movw	r18, r22
    105c:	ac 01       	movw	r20, r24
    105e:	60 e0       	ldi	r22, 0x00	; 0
    1060:	70 e0       	ldi	r23, 0x00	; 0
    1062:	80 e8       	ldi	r24, 0x80	; 128
    1064:	9f e3       	ldi	r25, 0x3F	; 63
    1066:	11 c1       	rjmp	.+546    	; 0x128a <__divsf3>
    1068:	f7 ce       	rjmp	.-530    	; 0xe58 <__fp_inf>
    106a:	fc ce       	rjmp	.-520    	; 0xe64 <__fp_mpack>

0000106c <ldexp>:
    106c:	33 df       	rcall	.-410    	; 0xed4 <__fp_splitA>
    106e:	e8 f3       	brcs	.-6      	; 0x106a <inverse+0x10>
    1070:	99 23       	and	r25, r25
    1072:	d9 f3       	breq	.-10     	; 0x106a <inverse+0x10>
    1074:	94 0f       	add	r25, r20
    1076:	51 1d       	adc	r21, r1
    1078:	bb f3       	brvs	.-18     	; 0x1068 <inverse+0xe>
    107a:	91 50       	subi	r25, 0x01	; 1
    107c:	50 40       	sbci	r21, 0x00	; 0
    107e:	94 f0       	brlt	.+36     	; 0x10a4 <ldexp+0x38>
    1080:	59 f0       	breq	.+22     	; 0x1098 <ldexp+0x2c>
    1082:	88 23       	and	r24, r24
    1084:	32 f0       	brmi	.+12     	; 0x1092 <ldexp+0x26>
    1086:	66 0f       	add	r22, r22
    1088:	77 1f       	adc	r23, r23
    108a:	88 1f       	adc	r24, r24
    108c:	91 50       	subi	r25, 0x01	; 1
    108e:	50 40       	sbci	r21, 0x00	; 0
    1090:	c1 f7       	brne	.-16     	; 0x1082 <ldexp+0x16>
    1092:	9e 3f       	cpi	r25, 0xFE	; 254
    1094:	51 05       	cpc	r21, r1
    1096:	44 f7       	brge	.-48     	; 0x1068 <inverse+0xe>
    1098:	88 0f       	add	r24, r24
    109a:	91 1d       	adc	r25, r1
    109c:	96 95       	lsr	r25
    109e:	87 95       	ror	r24
    10a0:	97 f9       	bld	r25, 7
    10a2:	08 95       	ret
    10a4:	5f 3f       	cpi	r21, 0xFF	; 255
    10a6:	ac f0       	brlt	.+42     	; 0x10d2 <ldexp+0x66>
    10a8:	98 3e       	cpi	r25, 0xE8	; 232
    10aa:	9c f0       	brlt	.+38     	; 0x10d2 <ldexp+0x66>
    10ac:	bb 27       	eor	r27, r27
    10ae:	86 95       	lsr	r24
    10b0:	77 95       	ror	r23
    10b2:	67 95       	ror	r22
    10b4:	b7 95       	ror	r27
    10b6:	08 f4       	brcc	.+2      	; 0x10ba <ldexp+0x4e>
    10b8:	b1 60       	ori	r27, 0x01	; 1
    10ba:	93 95       	inc	r25
    10bc:	c1 f7       	brne	.-16     	; 0x10ae <ldexp+0x42>
    10be:	bb 0f       	add	r27, r27
    10c0:	58 f7       	brcc	.-42     	; 0x1098 <ldexp+0x2c>
    10c2:	11 f4       	brne	.+4      	; 0x10c8 <ldexp+0x5c>
    10c4:	60 ff       	sbrs	r22, 0
    10c6:	e8 cf       	rjmp	.-48     	; 0x1098 <ldexp+0x2c>
    10c8:	6f 5f       	subi	r22, 0xFF	; 255
    10ca:	7f 4f       	sbci	r23, 0xFF	; 255
    10cc:	8f 4f       	sbci	r24, 0xFF	; 255
    10ce:	9f 4f       	sbci	r25, 0xFF	; 255
    10d0:	e3 cf       	rjmp	.-58     	; 0x1098 <ldexp+0x2c>
    10d2:	1b cf       	rjmp	.-458    	; 0xf0a <__fp_szero>
    10d4:	0e f0       	brts	.+2      	; 0x10d8 <ldexp+0x6c>
    10d6:	c6 ce       	rjmp	.-628    	; 0xe64 <__fp_mpack>
    10d8:	d3 ce       	rjmp	.-602    	; 0xe80 <__fp_nan>
    10da:	68 94       	set
    10dc:	bd ce       	rjmp	.-646    	; 0xe58 <__fp_inf>

000010de <log>:
    10de:	fa de       	rcall	.-524    	; 0xed4 <__fp_splitA>
    10e0:	c8 f3       	brcs	.-14     	; 0x10d4 <ldexp+0x68>
    10e2:	99 23       	and	r25, r25
    10e4:	d1 f3       	breq	.-12     	; 0x10da <ldexp+0x6e>
    10e6:	c6 f3       	brts	.-16     	; 0x10d8 <ldexp+0x6c>
    10e8:	df 93       	push	r29
    10ea:	cf 93       	push	r28
    10ec:	1f 93       	push	r17
    10ee:	0f 93       	push	r16
    10f0:	ff 92       	push	r15
    10f2:	c9 2f       	mov	r28, r25
    10f4:	dd 27       	eor	r29, r29
    10f6:	88 23       	and	r24, r24
    10f8:	2a f0       	brmi	.+10     	; 0x1104 <log+0x26>
    10fa:	21 97       	sbiw	r28, 0x01	; 1
    10fc:	66 0f       	add	r22, r22
    10fe:	77 1f       	adc	r23, r23
    1100:	88 1f       	adc	r24, r24
    1102:	da f7       	brpl	.-10     	; 0x10fa <log+0x1c>
    1104:	20 e0       	ldi	r18, 0x00	; 0
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	40 e8       	ldi	r20, 0x80	; 128
    110a:	5f eb       	ldi	r21, 0xBF	; 191
    110c:	9f e3       	ldi	r25, 0x3F	; 63
    110e:	88 39       	cpi	r24, 0x98	; 152
    1110:	20 f0       	brcs	.+8      	; 0x111a <log+0x3c>
    1112:	80 3e       	cpi	r24, 0xE0	; 224
    1114:	30 f0       	brcs	.+12     	; 0x1122 <log+0x44>
    1116:	21 96       	adiw	r28, 0x01	; 1
    1118:	8f 77       	andi	r24, 0x7F	; 127
    111a:	56 dd       	rcall	.-1364   	; 0xbc8 <__addsf3>
    111c:	ee e6       	ldi	r30, 0x6E	; 110
    111e:	f1 e0       	ldi	r31, 0x01	; 1
    1120:	03 c0       	rjmp	.+6      	; 0x1128 <log+0x4a>
    1122:	52 dd       	rcall	.-1372   	; 0xbc8 <__addsf3>
    1124:	eb e9       	ldi	r30, 0x9B	; 155
    1126:	f1 e0       	ldi	r31, 0x01	; 1
    1128:	73 df       	rcall	.-282    	; 0x1010 <__fp_powser>
    112a:	8b 01       	movw	r16, r22
    112c:	be 01       	movw	r22, r28
    112e:	ec 01       	movw	r28, r24
    1130:	fb 2e       	mov	r15, r27
    1132:	6f 57       	subi	r22, 0x7F	; 127
    1134:	71 09       	sbc	r23, r1
    1136:	75 95       	asr	r23
    1138:	77 1f       	adc	r23, r23
    113a:	88 0b       	sbc	r24, r24
    113c:	99 0b       	sbc	r25, r25
    113e:	df dd       	rcall	.-1090   	; 0xcfe <__floatsisf>
    1140:	28 e1       	ldi	r18, 0x18	; 24
    1142:	32 e7       	ldi	r19, 0x72	; 114
    1144:	41 e3       	ldi	r20, 0x31	; 49
    1146:	5f e3       	ldi	r21, 0x3F	; 63
    1148:	49 d0       	rcall	.+146    	; 0x11dc <__mulsf3x>
    114a:	af 2d       	mov	r26, r15
    114c:	98 01       	movw	r18, r16
    114e:	ae 01       	movw	r20, r28
    1150:	ff 90       	pop	r15
    1152:	0f 91       	pop	r16
    1154:	1f 91       	pop	r17
    1156:	cf 91       	pop	r28
    1158:	df 91       	pop	r29
    115a:	47 dd       	rcall	.-1394   	; 0xbea <__addsf3x>
    115c:	a2 ce       	rjmp	.-700    	; 0xea2 <__fp_round>

0000115e <modf>:
    115e:	fa 01       	movw	r30, r20
    1160:	dc 01       	movw	r26, r24
    1162:	aa 0f       	add	r26, r26
    1164:	bb 1f       	adc	r27, r27
    1166:	9b 01       	movw	r18, r22
    1168:	ac 01       	movw	r20, r24
    116a:	bf 57       	subi	r27, 0x7F	; 127
    116c:	28 f4       	brcc	.+10     	; 0x1178 <modf+0x1a>
    116e:	22 27       	eor	r18, r18
    1170:	33 27       	eor	r19, r19
    1172:	44 27       	eor	r20, r20
    1174:	50 78       	andi	r21, 0x80	; 128
    1176:	1f c0       	rjmp	.+62     	; 0x11b6 <modf+0x58>
    1178:	b7 51       	subi	r27, 0x17	; 23
    117a:	88 f4       	brcc	.+34     	; 0x119e <modf+0x40>
    117c:	ab 2f       	mov	r26, r27
    117e:	00 24       	eor	r0, r0
    1180:	46 95       	lsr	r20
    1182:	37 95       	ror	r19
    1184:	27 95       	ror	r18
    1186:	01 1c       	adc	r0, r1
    1188:	a3 95       	inc	r26
    118a:	d2 f3       	brmi	.-12     	; 0x1180 <modf+0x22>
    118c:	00 20       	and	r0, r0
    118e:	69 f0       	breq	.+26     	; 0x11aa <modf+0x4c>
    1190:	22 0f       	add	r18, r18
    1192:	33 1f       	adc	r19, r19
    1194:	44 1f       	adc	r20, r20
    1196:	b3 95       	inc	r27
    1198:	da f3       	brmi	.-10     	; 0x1190 <modf+0x32>
    119a:	0d d0       	rcall	.+26     	; 0x11b6 <modf+0x58>
    119c:	14 cd       	rjmp	.-1496   	; 0xbc6 <__subsf3>
    119e:	61 30       	cpi	r22, 0x01	; 1
    11a0:	71 05       	cpc	r23, r1
    11a2:	a0 e8       	ldi	r26, 0x80	; 128
    11a4:	8a 07       	cpc	r24, r26
    11a6:	b9 46       	sbci	r27, 0x69	; 105
    11a8:	30 f4       	brcc	.+12     	; 0x11b6 <modf+0x58>
    11aa:	9b 01       	movw	r18, r22
    11ac:	ac 01       	movw	r20, r24
    11ae:	66 27       	eor	r22, r22
    11b0:	77 27       	eor	r23, r23
    11b2:	88 27       	eor	r24, r24
    11b4:	90 78       	andi	r25, 0x80	; 128
    11b6:	30 96       	adiw	r30, 0x00	; 0
    11b8:	21 f0       	breq	.+8      	; 0x11c2 <modf+0x64>
    11ba:	20 83       	st	Z, r18
    11bc:	31 83       	std	Z+1, r19	; 0x01
    11be:	42 83       	std	Z+2, r20	; 0x02
    11c0:	53 83       	std	Z+3, r21	; 0x03
    11c2:	08 95       	ret

000011c4 <__mulsf3>:
    11c4:	0b d0       	rcall	.+22     	; 0x11dc <__mulsf3x>
    11c6:	6d ce       	rjmp	.-806    	; 0xea2 <__fp_round>
    11c8:	5e de       	rcall	.-836    	; 0xe86 <__fp_pscA>
    11ca:	28 f0       	brcs	.+10     	; 0x11d6 <__mulsf3+0x12>
    11cc:	63 de       	rcall	.-826    	; 0xe94 <__fp_pscB>
    11ce:	18 f0       	brcs	.+6      	; 0x11d6 <__mulsf3+0x12>
    11d0:	95 23       	and	r25, r21
    11d2:	09 f0       	breq	.+2      	; 0x11d6 <__mulsf3+0x12>
    11d4:	41 ce       	rjmp	.-894    	; 0xe58 <__fp_inf>
    11d6:	54 ce       	rjmp	.-856    	; 0xe80 <__fp_nan>
    11d8:	11 24       	eor	r1, r1
    11da:	97 ce       	rjmp	.-722    	; 0xf0a <__fp_szero>

000011dc <__mulsf3x>:
    11dc:	73 de       	rcall	.-794    	; 0xec4 <__fp_split3>
    11de:	a0 f3       	brcs	.-24     	; 0x11c8 <__mulsf3+0x4>

000011e0 <__mulsf3_pse>:
    11e0:	95 9f       	mul	r25, r21
    11e2:	d1 f3       	breq	.-12     	; 0x11d8 <__mulsf3+0x14>
    11e4:	95 0f       	add	r25, r21
    11e6:	50 e0       	ldi	r21, 0x00	; 0
    11e8:	55 1f       	adc	r21, r21
    11ea:	62 9f       	mul	r22, r18
    11ec:	f0 01       	movw	r30, r0
    11ee:	72 9f       	mul	r23, r18
    11f0:	bb 27       	eor	r27, r27
    11f2:	f0 0d       	add	r31, r0
    11f4:	b1 1d       	adc	r27, r1
    11f6:	63 9f       	mul	r22, r19
    11f8:	aa 27       	eor	r26, r26
    11fa:	f0 0d       	add	r31, r0
    11fc:	b1 1d       	adc	r27, r1
    11fe:	aa 1f       	adc	r26, r26
    1200:	64 9f       	mul	r22, r20
    1202:	66 27       	eor	r22, r22
    1204:	b0 0d       	add	r27, r0
    1206:	a1 1d       	adc	r26, r1
    1208:	66 1f       	adc	r22, r22
    120a:	82 9f       	mul	r24, r18
    120c:	22 27       	eor	r18, r18
    120e:	b0 0d       	add	r27, r0
    1210:	a1 1d       	adc	r26, r1
    1212:	62 1f       	adc	r22, r18
    1214:	73 9f       	mul	r23, r19
    1216:	b0 0d       	add	r27, r0
    1218:	a1 1d       	adc	r26, r1
    121a:	62 1f       	adc	r22, r18
    121c:	83 9f       	mul	r24, r19
    121e:	a0 0d       	add	r26, r0
    1220:	61 1d       	adc	r22, r1
    1222:	22 1f       	adc	r18, r18
    1224:	74 9f       	mul	r23, r20
    1226:	33 27       	eor	r19, r19
    1228:	a0 0d       	add	r26, r0
    122a:	61 1d       	adc	r22, r1
    122c:	23 1f       	adc	r18, r19
    122e:	84 9f       	mul	r24, r20
    1230:	60 0d       	add	r22, r0
    1232:	21 1d       	adc	r18, r1
    1234:	82 2f       	mov	r24, r18
    1236:	76 2f       	mov	r23, r22
    1238:	6a 2f       	mov	r22, r26
    123a:	11 24       	eor	r1, r1
    123c:	9f 57       	subi	r25, 0x7F	; 127
    123e:	50 40       	sbci	r21, 0x00	; 0
    1240:	8a f0       	brmi	.+34     	; 0x1264 <__mulsf3_pse+0x84>
    1242:	e1 f0       	breq	.+56     	; 0x127c <__mulsf3_pse+0x9c>
    1244:	88 23       	and	r24, r24
    1246:	4a f0       	brmi	.+18     	; 0x125a <__mulsf3_pse+0x7a>
    1248:	ee 0f       	add	r30, r30
    124a:	ff 1f       	adc	r31, r31
    124c:	bb 1f       	adc	r27, r27
    124e:	66 1f       	adc	r22, r22
    1250:	77 1f       	adc	r23, r23
    1252:	88 1f       	adc	r24, r24
    1254:	91 50       	subi	r25, 0x01	; 1
    1256:	50 40       	sbci	r21, 0x00	; 0
    1258:	a9 f7       	brne	.-22     	; 0x1244 <__mulsf3_pse+0x64>
    125a:	9e 3f       	cpi	r25, 0xFE	; 254
    125c:	51 05       	cpc	r21, r1
    125e:	70 f0       	brcs	.+28     	; 0x127c <__mulsf3_pse+0x9c>
    1260:	fb cd       	rjmp	.-1034   	; 0xe58 <__fp_inf>
    1262:	53 ce       	rjmp	.-858    	; 0xf0a <__fp_szero>
    1264:	5f 3f       	cpi	r21, 0xFF	; 255
    1266:	ec f3       	brlt	.-6      	; 0x1262 <__mulsf3_pse+0x82>
    1268:	98 3e       	cpi	r25, 0xE8	; 232
    126a:	dc f3       	brlt	.-10     	; 0x1262 <__mulsf3_pse+0x82>
    126c:	86 95       	lsr	r24
    126e:	77 95       	ror	r23
    1270:	67 95       	ror	r22
    1272:	b7 95       	ror	r27
    1274:	f7 95       	ror	r31
    1276:	e7 95       	ror	r30
    1278:	9f 5f       	subi	r25, 0xFF	; 255
    127a:	c1 f7       	brne	.-16     	; 0x126c <__mulsf3_pse+0x8c>
    127c:	fe 2b       	or	r31, r30
    127e:	88 0f       	add	r24, r24
    1280:	91 1d       	adc	r25, r1
    1282:	96 95       	lsr	r25
    1284:	87 95       	ror	r24
    1286:	97 f9       	bld	r25, 7
    1288:	08 95       	ret

0000128a <__divsf3>:
    128a:	0c d0       	rcall	.+24     	; 0x12a4 <__divsf3x>
    128c:	0a ce       	rjmp	.-1004   	; 0xea2 <__fp_round>
    128e:	02 de       	rcall	.-1020   	; 0xe94 <__fp_pscB>
    1290:	40 f0       	brcs	.+16     	; 0x12a2 <__divsf3+0x18>
    1292:	f9 dd       	rcall	.-1038   	; 0xe86 <__fp_pscA>
    1294:	30 f0       	brcs	.+12     	; 0x12a2 <__divsf3+0x18>
    1296:	21 f4       	brne	.+8      	; 0x12a0 <__divsf3+0x16>
    1298:	5f 3f       	cpi	r21, 0xFF	; 255
    129a:	19 f0       	breq	.+6      	; 0x12a2 <__divsf3+0x18>
    129c:	dd cd       	rjmp	.-1094   	; 0xe58 <__fp_inf>
    129e:	51 11       	cpse	r21, r1
    12a0:	34 ce       	rjmp	.-920    	; 0xf0a <__fp_szero>
    12a2:	ee cd       	rjmp	.-1060   	; 0xe80 <__fp_nan>

000012a4 <__divsf3x>:
    12a4:	0f de       	rcall	.-994    	; 0xec4 <__fp_split3>
    12a6:	98 f3       	brcs	.-26     	; 0x128e <__divsf3+0x4>

000012a8 <__divsf3_pse>:
    12a8:	99 23       	and	r25, r25
    12aa:	c9 f3       	breq	.-14     	; 0x129e <__divsf3+0x14>
    12ac:	55 23       	and	r21, r21
    12ae:	b1 f3       	breq	.-20     	; 0x129c <__divsf3+0x12>
    12b0:	95 1b       	sub	r25, r21
    12b2:	55 0b       	sbc	r21, r21
    12b4:	bb 27       	eor	r27, r27
    12b6:	aa 27       	eor	r26, r26
    12b8:	62 17       	cp	r22, r18
    12ba:	73 07       	cpc	r23, r19
    12bc:	84 07       	cpc	r24, r20
    12be:	38 f0       	brcs	.+14     	; 0x12ce <__divsf3_pse+0x26>
    12c0:	9f 5f       	subi	r25, 0xFF	; 255
    12c2:	5f 4f       	sbci	r21, 0xFF	; 255
    12c4:	22 0f       	add	r18, r18
    12c6:	33 1f       	adc	r19, r19
    12c8:	44 1f       	adc	r20, r20
    12ca:	aa 1f       	adc	r26, r26
    12cc:	a9 f3       	breq	.-22     	; 0x12b8 <__divsf3_pse+0x10>
    12ce:	33 d0       	rcall	.+102    	; 0x1336 <__divsf3_pse+0x8e>
    12d0:	0e 2e       	mov	r0, r30
    12d2:	3a f0       	brmi	.+14     	; 0x12e2 <__divsf3_pse+0x3a>
    12d4:	e0 e8       	ldi	r30, 0x80	; 128
    12d6:	30 d0       	rcall	.+96     	; 0x1338 <__divsf3_pse+0x90>
    12d8:	91 50       	subi	r25, 0x01	; 1
    12da:	50 40       	sbci	r21, 0x00	; 0
    12dc:	e6 95       	lsr	r30
    12de:	00 1c       	adc	r0, r0
    12e0:	ca f7       	brpl	.-14     	; 0x12d4 <__divsf3_pse+0x2c>
    12e2:	29 d0       	rcall	.+82     	; 0x1336 <__divsf3_pse+0x8e>
    12e4:	fe 2f       	mov	r31, r30
    12e6:	27 d0       	rcall	.+78     	; 0x1336 <__divsf3_pse+0x8e>
    12e8:	66 0f       	add	r22, r22
    12ea:	77 1f       	adc	r23, r23
    12ec:	88 1f       	adc	r24, r24
    12ee:	bb 1f       	adc	r27, r27
    12f0:	26 17       	cp	r18, r22
    12f2:	37 07       	cpc	r19, r23
    12f4:	48 07       	cpc	r20, r24
    12f6:	ab 07       	cpc	r26, r27
    12f8:	b0 e8       	ldi	r27, 0x80	; 128
    12fa:	09 f0       	breq	.+2      	; 0x12fe <__divsf3_pse+0x56>
    12fc:	bb 0b       	sbc	r27, r27
    12fe:	80 2d       	mov	r24, r0
    1300:	bf 01       	movw	r22, r30
    1302:	ff 27       	eor	r31, r31
    1304:	93 58       	subi	r25, 0x83	; 131
    1306:	5f 4f       	sbci	r21, 0xFF	; 255
    1308:	2a f0       	brmi	.+10     	; 0x1314 <__divsf3_pse+0x6c>
    130a:	9e 3f       	cpi	r25, 0xFE	; 254
    130c:	51 05       	cpc	r21, r1
    130e:	68 f0       	brcs	.+26     	; 0x132a <__divsf3_pse+0x82>
    1310:	a3 cd       	rjmp	.-1210   	; 0xe58 <__fp_inf>
    1312:	fb cd       	rjmp	.-1034   	; 0xf0a <__fp_szero>
    1314:	5f 3f       	cpi	r21, 0xFF	; 255
    1316:	ec f3       	brlt	.-6      	; 0x1312 <__divsf3_pse+0x6a>
    1318:	98 3e       	cpi	r25, 0xE8	; 232
    131a:	dc f3       	brlt	.-10     	; 0x1312 <__divsf3_pse+0x6a>
    131c:	86 95       	lsr	r24
    131e:	77 95       	ror	r23
    1320:	67 95       	ror	r22
    1322:	b7 95       	ror	r27
    1324:	f7 95       	ror	r31
    1326:	9f 5f       	subi	r25, 0xFF	; 255
    1328:	c9 f7       	brne	.-14     	; 0x131c <__divsf3_pse+0x74>
    132a:	88 0f       	add	r24, r24
    132c:	91 1d       	adc	r25, r1
    132e:	96 95       	lsr	r25
    1330:	87 95       	ror	r24
    1332:	97 f9       	bld	r25, 7
    1334:	08 95       	ret
    1336:	e1 e0       	ldi	r30, 0x01	; 1
    1338:	66 0f       	add	r22, r22
    133a:	77 1f       	adc	r23, r23
    133c:	88 1f       	adc	r24, r24
    133e:	bb 1f       	adc	r27, r27
    1340:	62 17       	cp	r22, r18
    1342:	73 07       	cpc	r23, r19
    1344:	84 07       	cpc	r24, r20
    1346:	ba 07       	cpc	r27, r26
    1348:	20 f0       	brcs	.+8      	; 0x1352 <__divsf3_pse+0xaa>
    134a:	62 1b       	sub	r22, r18
    134c:	73 0b       	sbc	r23, r19
    134e:	84 0b       	sbc	r24, r20
    1350:	ba 0b       	sbc	r27, r26
    1352:	ee 1f       	adc	r30, r30
    1354:	88 f7       	brcc	.-30     	; 0x1338 <__divsf3_pse+0x90>
    1356:	e0 95       	com	r30
    1358:	08 95       	ret

0000135a <__udivmodsi4>:
    135a:	a1 e2       	ldi	r26, 0x21	; 33
    135c:	1a 2e       	mov	r1, r26
    135e:	aa 1b       	sub	r26, r26
    1360:	bb 1b       	sub	r27, r27
    1362:	fd 01       	movw	r30, r26
    1364:	0d c0       	rjmp	.+26     	; 0x1380 <__udivmodsi4_ep>

00001366 <__udivmodsi4_loop>:
    1366:	aa 1f       	adc	r26, r26
    1368:	bb 1f       	adc	r27, r27
    136a:	ee 1f       	adc	r30, r30
    136c:	ff 1f       	adc	r31, r31
    136e:	a2 17       	cp	r26, r18
    1370:	b3 07       	cpc	r27, r19
    1372:	e4 07       	cpc	r30, r20
    1374:	f5 07       	cpc	r31, r21
    1376:	20 f0       	brcs	.+8      	; 0x1380 <__udivmodsi4_ep>
    1378:	a2 1b       	sub	r26, r18
    137a:	b3 0b       	sbc	r27, r19
    137c:	e4 0b       	sbc	r30, r20
    137e:	f5 0b       	sbc	r31, r21

00001380 <__udivmodsi4_ep>:
    1380:	66 1f       	adc	r22, r22
    1382:	77 1f       	adc	r23, r23
    1384:	88 1f       	adc	r24, r24
    1386:	99 1f       	adc	r25, r25
    1388:	1a 94       	dec	r1
    138a:	69 f7       	brne	.-38     	; 0x1366 <__udivmodsi4_loop>
    138c:	60 95       	com	r22
    138e:	70 95       	com	r23
    1390:	80 95       	com	r24
    1392:	90 95       	com	r25
    1394:	9b 01       	movw	r18, r22
    1396:	ac 01       	movw	r20, r24
    1398:	bd 01       	movw	r22, r26
    139a:	cf 01       	movw	r24, r30
    139c:	08 95       	ret

0000139e <__tablejump2__>:
    139e:	ee 0f       	add	r30, r30
    13a0:	ff 1f       	adc	r31, r31
    13a2:	00 24       	eor	r0, r0
    13a4:	00 1c       	adc	r0, r0
    13a6:	0b be       	out	0x3b, r0	; 59
    13a8:	07 90       	elpm	r0, Z+
    13aa:	f6 91       	elpm	r31, Z
    13ac:	e0 2d       	mov	r30, r0
    13ae:	09 94       	ijmp

000013b0 <_exit>:
    13b0:	f8 94       	cli

000013b2 <__stop_program>:
    13b2:	ff cf       	rjmp	.-2      	; 0x13b2 <__stop_program>
